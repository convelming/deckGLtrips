{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","log2","lngLatToWorld","lng","lat","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","Number","isFinite","latCosine","cos","getDistanceScales","longitude","highPrecision","undefined","result","worldSize","pixelsPerDegreeX","pixelsPerDegreeY","altPixelsPerMeter","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","latCosine2","pixelsPerDegreeY2","altPixelsPerDegree2","altPixelsPerMeter2","pixelsPerDegree2","pixelsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","flipY","vm","Vector3","negate","getProjectionParameters","width","nearZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","sin","farZ","fov","aspect","focalDistance","near","far","getProjectionMatrix","projectionMatrix","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {Vector3} from 'math.gl';\nimport {createMat4, transformVector} from './math-utils';\n\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nimport vec2_lerp from 'gl-vec2/lerp';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param {Array} lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return {Array} [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = scale * (lambda2 + PI) / (2 * PI);\n  const y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param {object|Vector} xy - object with {x,y} members\n *  representing point on projected map plane\n * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat([x, y], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = (x / scale) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales({latitude, longitude, zoom, scale, highPrecision = false}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n\n  const result = {};\n  const worldSize = TILE_SIZE * scale;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const pixelsPerDegreeX = worldSize / 360;\n  const pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    const altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const scale = 1; // any constant works\n  const {pixelsPerMeter, pixelsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    scale,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace, scale);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  center = null,\n  // Options\n  flipY = false\n}) {\n\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4_translate(vm, vm, [0, 0, -altitude]);\n\n  // After the rotateX, z values are in pixel units. Convert them to\n  // altitude units. 1 altitude unit = the screen height.\n  mat4_scale(vm, vm, [1, 1, 1 / height]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4_rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4_rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4_scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4_translate(vm, vm, new Vector3(center).negate());\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * Math.atan((height / 2) / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} =\n    getProjectionParameters({width, height, altitude, pitch, nearZMultiplier, farZMultiplier});\n\n  const projectionMatrix = mat4_perspective(\n    [],\n    fov,      // fov in radians\n    aspect,   // aspect ratio\n    near,     // near plane\n    far       // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param {Array} xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param {Matrix4} pixelProjectionMatrix - projection matrix\n * @return {Array} [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param {Array} xyz - pixel coordinate on screen.\n * @param {Matrix4} pixelUnprojectionMatrix - unprojection matrix\n * @param {Number} targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return {Array} [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y));\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2_lerp([], coord0, coord1, t);\n}\n"],"file":"web-mercator-utils.js"}