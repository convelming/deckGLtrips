{"version":3,"sources":["../../../src/webgl/texture.js"],"names":["Resource","Buffer","withParameters","WebGLBuffer","isWebGL2","assertWebGL2Context","log","uid","isPowerOfTwo","assert","NPOT_MIN_FILTERS","TEXTURE_FORMATS","dataFormat","types","gl2","isFormatSupported","gl","format","info","gl1","undefined","value","getExtension","isLinearFilteringSupported","Texture","isSupported","linearFiltering","supported","constructor","opts","id","handle","target","hasFloatTexture","textureUnit","toString","width","height","initialize","data","pixels","type","border","recreate","parameters","pixelStore","unpackFlipY","mipmaps","_deduceParameters","compressed","Number","isFinite","activeTexture","bindTexture","DEFAULT_TEXTURE_SETTINGS","glSettings","Object","assign","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","resize","params","level","offset","dataType","_getDataType","texImage2D","bindBuffer","compressedTexImage2D","setSubImageData","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","framebuffer","internalFormat","bind","copyTexImage2D","unbind","getActiveUnit","getParameter","Error","setImage3D","internalformat","depth","texImage3D","textureFormat","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from '../constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\n\nimport {withParameters} from '../webgl-context/context-state';\n\nimport {WebGLBuffer} from '../webgl-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\n\nimport {log, uid, isPowerOfTwo} from '../utils';\nimport assert from '../utils/assert';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nfunction isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n  // Both WebGL1 and WebGL2?\n  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');\n  // Not in WebGL2?\n  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');\n  default: return true;\n  }\n}\n\nexport default class Texture extends Resource {\n\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, opts) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = opts;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    let data = opts.data;\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined,\n      // Deprecated parameters\n      unpackFlipY = true\n    } = opts;\n\n    let {mipmaps = true} = opts;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = opts;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format, type, dataFormat, compressed: false, data, width, height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (this._isNPOT() && mipmaps) {\n\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n    this.mipmaps = mipmaps;\n\n    this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps, parameters: glSettings});\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    offset = 0,\n    border = 0,\n    compressed = false,\n    parameters = {}\n  }) {\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n      case 'null':\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n        break;\n      case 'typed-array':\n        // Looks like this assert is not necessary, as offset is ignored under WebGL1\n        // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n        break;\n      case 'buffer':\n        // WebGL2 enables creating textures directly from a WebGL buffer\n        assertWebGL2Context(gl);\n        gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n        gl.texImage2D(target, level, format, width, height, border, format, type, offset);\n        break;\n      case 'browser-object':\n        gl.texImage2D(target, level, format, format, type, data);\n        break;\n      case 'compressed':\n        gl.compressedTexImage2D(this.target, level, format, width, height, border, data);\n        break;\n      default:\n        assert(false, 'Unknown image data type');\n      }\n    });\n\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target,\n          level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target,\n          level, x, y, width, height, format, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, format, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, format, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer({\n    target = this.target,\n    framebuffer,\n    offset = 0,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    internalFormat = GL.RGBA,\n    border = 0\n  }) {\n    if (framebuffer) {\n      framebuffer.bind();\n    }\n\n    // target\n    this.bind();\n    this.gl.copyTexImage2D(\n      this.target, level, internalFormat, x, y, width, height, border);\n    this.unbind();\n\n    if (framebuffer) {\n      framebuffer.unbind();\n    }\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return this;\n    }\n\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, offset);\n    }\n\n    return this;\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize({data, width, height}));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  // eslint-disable-next-line complexity\n  _deduceImageSize({data, width, height}) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n    case GL.TEXTURE_WIDTH:\n      return this.width;\n    case GL.TEXTURE_HEIGHT:\n      return this.height;\n    default:\n      this.gl.bindTexture(this.target, this.handle);\n      const value = this.gl.getTexParameter(this.target, pname);\n      this.gl.bindTexture(this.target, null);\n      return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.texParameterf(this.handle, pname, param);\n      break;\n\n    case GL.TEXTURE_WIDTH:\n    case GL.TEXTURE_HEIGHT:\n      assert(false);\n      break;\n\n    default:\n      this.gl.texParameteri(this.target, pname, param);\n      break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    return (!isWebGL2(this.gl) && (!isPowerOfTwo(this.width) || (!isPowerOfTwo(this.height))));\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n      case GL.TEXTURE_MIN_FILTER:\n        if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n          // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n          param = GL.LINEAR;\n        }\n        break;\n      case GL.TEXTURE_WRAP_S:\n      case GL.TEXTURE_WRAP_T:\n        if (param !== GL.CLAMP_TO_EDGE) {\n          // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n          param = GL.CLAMP_TO_EDGE;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}