{"version":3,"sources":["../../../src/multipass/canvas.js"],"names":["createGLContext","Model","Texture2D","_MultiPassRenderer","MultiPassRenderer","_ClearPass","ClearPass","_CopyPass","CopyPass","_TexturePass","TexturePass","ShaderModulePass","DEFAULT_VS","Canvas","constructor","canvas","document","createElement","width","clientWidth","height","clientHeight","gl","opts","premultipliedAlpha","Error","texture","spareTexture","flippedModel","installFiltersAsMethods","filters","key","props","filter","bind","setTexture","element","pixels","resize","realToCSSPixels","displayWidth","Math","floor","displayHeight","style","viewport","replace","node","parentNode","insertBefore","removeChild","draw","multiPassRenderer","screen","render","update","shaderModule","getPixelArray","w","h","array","Uint8Array","drawTo","readPixels","_initialize","type","getExtension","testTexture","format","error","destroy","extraTexture","vs","fs","isInitialized"],"mappings":"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","sourcesContent":["import 'luma.gl/debug';\n\nimport {\n  createGLContext,\n  Model,\n  Texture2D,\n  _MultiPassRenderer as MultiPassRenderer,\n  _ClearPass as ClearPass,\n  _CopyPass as CopyPass,\n  _TexturePass as TexturePass\n} from 'luma.gl';\n\nimport ShaderModulePass from './shader-module-pass';\n\n/* global document */\n\nconst DEFAULT_VS = `\\\nattribute vec2 vertex;\nattribute vec2 _texCoord;\nvarying vec2 texCoord;\nvoid main() {\n  texCoord = _texCoord;\n  gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);\n}\n`;\n\nexport default class Canvas {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.width = this.canvas.clientWidth;\n    this.height = this.canvas.clientHeight;\n\n    this.gl = createGLContext({canvas: this.canvas, opts: {premultipliedAlpha: false}});\n\n    if (!this.gl) {\n      throw new Error('This browser does not support WebGL');\n    }\n\n    this.texture = null;\n    this.spareTexture = null;\n    this.flippedModel = null;\n  }\n\n  installFiltersAsMethods(filters) {\n    // // Filter methods\n    for (const key in filters) {\n      if (key !== 'canvas') {\n        this[key] = props => this.filter(filters[key], props).bind(this);\n      }\n    }\n  }\n\n  setTexture(element) {\n    this.texture = new Texture2D(this.gl, {pixels: element});\n    this.resize(this.gl, this.texture.width, this.texture.height);\n    return this;\n  }\n\n  resize(gl, width, height) {\n    const realToCSSPixels = 1; // window.devicePixelRatio || 1;\n\n    // Check if the canvas is not the same size.\n    if (gl.canvas.width !== width || gl.canvas.height !== height) {\n\n      // Make the canvas the same size\n      gl.canvas.width = width;\n      gl.canvas.height = height;\n\n      // Lookup the size the browser is displaying the canvas in CSS pixels\n      // and compute a size needed to make our drawingbuffer match it in\n      // device pixels.\n      const displayWidth = Math.floor(width / realToCSSPixels);\n      const displayHeight = Math.floor(height / realToCSSPixels);\n\n      gl.canvas.style.width = `${displayWidth}px`;\n      gl.canvas.style.height = `${displayHeight}px`;\n\n      gl.viewport(0, 0, width, height);\n\n      this.width = displayWidth;\n      this.height = displayHeight;\n    }\n  }\n\n  replace(node) {\n    node.parentNode.insertBefore(this.canvas, node);\n    node.parentNode.removeChild(node);\n    return this;\n  }\n\n  // Draw a texture to the canvas, with an optional width and height to scale to.\n  // If no width and height are given then the original texture width and height\n  // are used.\n  draw() {\n    this.multiPassRenderer = new MultiPassRenderer(this.gl, [\n      new ClearPass(this.gl),\n      new TexturePass(this.gl, {texture: this.texture}),\n      new CopyPass(this.gl, {screen: true})\n    ]);\n\n    this.multiPassRenderer.render();\n\n    return this;\n  }\n\n  update() {\n    this.multiPassRenderer.render({});\n    return this;\n  }\n\n  filter(shaderModule, props) {\n    this.multiPassRenderer = new MultiPassRenderer(this.gl, [\n      new ClearPass(this.gl),\n      new TexturePass(this.gl, {texture: this.texture}),\n      new ShaderModulePass(this.gl, shaderModule, props),\n      new CopyPass(this.gl, {screen: true})\n    ]);\n\n    this.multiPassRenderer.render();\n\n    return this;\n  }\n\n  /*\n  contents() {\n    // const gl = this.gl;\n    // const texture = new Texture2D(this.gl, {\n    //   width: this.texture.width,\n    //   height: this.texture.height,\n    //   format: gl.RGBA,\n    //   type: gl.UNSIGNED_BYTE\n    // });\n    // this.texture.use();\n    // texture.drawTo(() => this.getDefaultModel(this.gl).drawRect());\n    // return wrapTexture(texture);\n  }\n  */\n\n  // Get a Uint8 array of pixel values: [r, g, b, a, r, g, b, a, ...]\n  // Length of the array will be width * height * 4.\n  getPixelArray() {\n    const gl = this.gl;\n    const w = this.texture.width;\n    const h = this.texture.height;\n    const array = new Uint8Array(w * h * 4);\n    this.texture.drawTo(() => gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, array));\n    return array;\n  }\n\n  _initialize(width, height) {\n    const gl = this.gl;\n    let type = gl.UNSIGNED_BYTE;\n\n    // Go for floating point buffer textures if we can, it'll make the bokeh\n    // filter look a lot better. Note that on Windows, ANGLE does not let you\n    // render to a floating-point texture when linear filtering is enabled.\n    // See http://crbug.com/172278 for more information.\n    if (this.gl.getExtension('OES_texture_float') && gl.getExtension('OES_texture_float_linear')) {\n      const testTexture = new Texture2D(this.gl, {\n        width: 100,\n        height: 100,\n        format: gl.RGBA,\n        type: gl.FLOAT\n      });\n\n      try {\n        // Only use gl.FLOAT if we can render to it\n        testTexture.drawTo(() => {\n          type = gl.FLOAT;\n        });\n      } catch (error) {\n        // ignore\n      }\n      testTexture.destroy();\n    }\n\n    if (this.spareTexture) {\n      this.spareTexture.destroy();\n    }\n    this.width = width;\n    this.height = height;\n    this.texture = new Texture2D(this.gl, {width, height, format: gl.RGBA, type});\n    this.spareTexture = new Texture2D(this.gl, {width, height, format: gl.RGBA, type});\n    this.extraTexture = this.extraTexture ||\n      new Texture2D(this.gl, {width: 0, height: 0, format: gl.RGBA, type});\n    this.flippedModel = this.flippedModel || new Model(this.gl, {\n      vs: DEFAULT_VS,\n      fs: `\\\nuniform sampler2D texture;\nvarying vec2 texCoord;\nvoid main() {\n  gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));\n}\n`\n    });\n    this.isInitialized = true;\n  }\n}\n"],"file":"canvas.js"}