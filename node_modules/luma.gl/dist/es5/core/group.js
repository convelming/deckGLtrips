"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _object3d = _interopRequireDefault(require("./object-3d"));

var _math = require("math.gl");

var _assert = _interopRequireDefault(require("../utils/assert"));

var Group =
/*#__PURE__*/
function (_Object3D) {
  (0, _inherits2.default)(Group, _Object3D);

  function Group() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Group);
    opts = Array.isArray(opts) ? {
      children: opts
    } : opts;
    var _opts = opts,
        _opts$children = _opts.children,
        children = _opts$children === void 0 ? [] : _opts$children;
    children.every(function (child) {
      return (0, _assert.default)(child instanceof _object3d.default);
    });
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Group).call(this, opts));
    _this.children = children;
    return _this;
  } // Unpacks arrays and nested arrays of children


  (0, _createClass2.default)(Group, [{
    key: "add",
    value: function add() {
      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      for (var _i = 0; _i < children.length; _i++) {
        var child = children[_i];

        if (Array.isArray(child)) {
          this.add.apply(this, (0, _toConsumableArray2.default)(child));
        } else {
          this.children.push(child);
        }
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(child) {
      var children = this.children;
      var indexOf = children.indexOf(child);

      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }

      return this;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      this.children = [];
      return this;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverse`. Otherwise `traverse` will return null.

  }, {
    key: "traverse",
    value: function traverse(visitor) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === void 0 ? new _math.Matrix4() : _ref$modelMatrix;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;
          var matrix = child.matrix;
          modelMatrix = modelMatrix.multiplyRight(matrix);
          var result = void 0;

          if (child instanceof Group) {
            result = child.traverse(visitor, {
              modelMatrix: modelMatrix
            });
          } else {
            // child.setUniforms({modelMatrix});
            result = visitor(child, {});
          } // Abort if a result was returned


          if (result) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.

  }, {
    key: "traverseReverse",
    value: function traverseReverse(visitor) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$modelMatrix = _ref2.modelMatrix,
          modelMatrix = _ref2$modelMatrix === void 0 ? new _math.Matrix4() : _ref2$modelMatrix;

      for (var i = this.children.length - 1; i >= 0; --i) {
        var child = this.children[i];
        var matrix = child.matrix;
        modelMatrix = modelMatrix.multiplyRight(matrix);
        var result = void 0;

        if (child instanceof Group) {
          result = child.traverseReverse(visitor, {
            modelMatrix: modelMatrix
          });
        } else {
          // child.setUniforms({modelMatrix});
          result = visitor(child, {});
        } // Abort if a result was returned


        if (result) {
          return result;
        }
      }

      return null;
    }
  }]);
  return Group;
}(_object3d.default);

exports.default = Group;
//# sourceMappingURL=group.js.map