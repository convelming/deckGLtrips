"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _resource = _interopRequireDefault(require("./resource"));

var _webglUtils = require("../webgl-utils");

var _queryManager = _interopRequireDefault(require("../webgl-utils/query-manager"));

var FenceSync =
/*#__PURE__*/
function (_Resource) {
  (0, _inherits2.default)(FenceSync, _Resource);

  /*
   * @class
   * @param {WebGL2RenderingContext} gl
   */
  function FenceSync(gl, opts) {
    var _this;

    (0, _classCallCheck2.default)(this, FenceSync);
    (0, _webglUtils.assertWebGL2Context)(gl);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FenceSync).call(this, gl, opts)); // query manager needs a promise field

    _this.promise = null;
    Object.seal((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    return _this;
  }
  /**
   * The method is a no-op in the absence of the possibility of
   * synchronizing between multiple GL contexts.
   * Prevent commands from being added to GPU command queue.
   * Note: commands can still be buffered in driver.
   *
   * @param {GLbitfield} flags
   * @param {GLint64} timeout
   * @return {Sync} status
   */


  (0, _createClass2.default)(FenceSync, [{
    key: "wait",
    value: function wait() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$flags = _ref.flags,
          flags = _ref$flags === void 0 ? 0 : _ref$flags,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === void 0 ? -1 : _ref$timeout;

      this.gl.waitSync(this.handle, flags, timeout);
      return this;
    }
    /**
     * Block all CPU operations until fence is signalled
     * @param {GLbitfield} flags
     * @param {GLint64} timeout
     * @return {GLenum} result
     */

  }, {
    key: "clientWait",
    value: function clientWait(_ref2) {
      var _ref2$flags = _ref2.flags,
          flags = _ref2$flags === void 0 ? 1 : _ref2$flags,
          timeout = _ref2.timeout;
      var result = this.gl.clientWaitSync(this.handle, flags, timeout); // TODO - map to boolean?

      switch (result) {
        case 37146:
          // Indicates that sync object was signaled when this method was called.
          break;

        case 37147:
          // Indicates that timeout time passed, sync object did not become signaled
          break;

        case 37148:
          // Indicates that sync object was signaled before timeout expired.
          break;

        case 37149:
          // Indicates that an error occurred during execution.
          break;

        default:
      }

      return result;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      _queryManager.default.cancelQuery(this);
    }
  }, {
    key: "isSignaled",
    value: function isSignaled() {
      return this.getParameter(37140) === 37145;
    } // TODO - Query manager needs these?

  }, {
    key: "isResultAvailable",
    value: function isResultAvailable() {
      return this.isSignaled();
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.isSignaled();
    }
  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      return this.gl.getSyncParameter(this.handle, pname);
    } // PRIVATE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.fenceSync(37143, 0);
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      _queryManager.default.deleteQuery(this);

      this.gl.deleteSync(this.handle);
    }
  }]);
  return FenceSync;
}(_resource.default);

exports.default = FenceSync;
//# sourceMappingURL=fence-sync.js.map