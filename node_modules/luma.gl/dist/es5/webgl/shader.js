"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FragmentShader = exports.VertexShader = exports.Shader = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _resource = _interopRequireDefault(require("./resource"));

var _webglUtils = require("../webgl-utils");

var _utils = require("../utils");

var _assert = _interopRequireDefault(require("../utils/assert"));

var ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';
var GL_FRAGMENT_SHADER = 0x8B30;
var GL_VERTEX_SHADER = 0x8B31;
var GL_COMPILE_STATUS = 0x8B81;
var GL_SHADER_TYPE = 0x8B4F; // For now this is an internal class

var Shader =
/*#__PURE__*/
function (_Resource) {
  (0, _inherits2.default)(Shader, _Resource);
  (0, _createClass2.default)(Shader, null, [{
    key: "getTypeName",
    value: function getTypeName(shaderType) {
      switch (shaderType) {
        case GL_VERTEX_SHADER:
          return 'vertex-shader';

        case GL_FRAGMENT_SHADER:
          return 'fragment-shader';

        default:
          (0, _assert.default)(false);
          return 'unknown';
      }
    }
    /* eslint-disable max-statements */

  }]);

  function Shader(gl, props) {
    var _this;

    (0, _classCallCheck2.default)(this, Shader);
    (0, _webglUtils.assertWebGLContext)(gl); // Validate arguments

    (0, _assert.default)(typeof props.source === 'string', ERR_SOURCE); // Deduce an id, from shader source, or supplied id, or shader type

    var id = (0, _webglUtils.getShaderName)(props.source, null) || props.id || (0, _utils.uid)("unnamed ".concat(Shader.getTypeName(props.shaderType)));
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Shader).call(this, gl, {
      id: id
    }));
    _this.shaderType = props.shaderType;
    _this.source = props.source;

    _this.initialize(props);

    return _this;
  }

  (0, _createClass2.default)(Shader, [{
    key: "initialize",
    value: function initialize(_ref) {
      var source = _ref.source;
      var shaderName = (0, _webglUtils.getShaderName)(source, null);

      if (shaderName) {
        this.id = (0, _utils.uid)(shaderName);
      }

      this._compile(source);
    } // Accessors

  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      return this.gl.getShaderParameter(this.handle, pname);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.getTypeName(this.shaderType), ":").concat(this.id);
    }
  }, {
    key: "getName",
    value: function getName() {
      return (0, _webglUtils.getShaderName)(this.source) || 'unnamed-shader';
    }
  }, {
    key: "getSource",
    value: function getSource() {
      return this.gl.getShaderSource(this.handle);
    } // Debug method - Returns translated source if available

  }, {
    key: "getTranslatedSource",
    value: function getTranslatedSource() {
      var extension = this.gl.getExtension('WEBGL_debug_shaders');
      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';
    } // PRIVATE METHODS

  }, {
    key: "_compile",
    value: function _compile() {
      this.gl.shaderSource(this.handle, this.source);
      this.gl.compileShader(this.handle); // TODO - For performance reasons, avoid checking shader compilation errors on production?
      // TODO - Load log even when no error reported, to catch warnings?
      // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings

      var compileStatus = this.getParameter(GL_COMPILE_STATUS);

      if (!compileStatus) {
        var infoLog = this.gl.getShaderInfoLog(this.handle);

        var _parseGLSLCompilerErr = (0, _webglUtils.parseGLSLCompilerError)(infoLog, this.source, this.shaderType, this.id),
            shaderName = _parseGLSLCompilerErr.shaderName,
            errors = _parseGLSLCompilerErr.errors,
            warnings = _parseGLSLCompilerErr.warnings;

        _utils.log.error("GLSL compilation errors in ".concat(shaderName, "\n").concat(errors))();

        _utils.log.warn("GLSL compilation warnings in ".concat(shaderName, "\n").concat(warnings))();

        throw new Error("GLSL compilation errors in ".concat(shaderName));
      }
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteShader(this.handle);
    }
  }, {
    key: "_getOptsFromHandle",
    value: function _getOptsFromHandle() {
      return {
        type: this.getParameter(GL_SHADER_TYPE),
        source: this.getSource()
      };
    }
  }]);
  return Shader;
}(_resource.default);

exports.Shader = Shader;

var VertexShader =
/*#__PURE__*/
function (_Shader) {
  (0, _inherits2.default)(VertexShader, _Shader);

  function VertexShader(gl, props) {
    (0, _classCallCheck2.default)(this, VertexShader);

    // DEPRECATED: Support old constructor signature: VertexShader(gl, source)
    if (typeof props === 'string') {
      _utils.log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');

      props = {
        source: props
      };
    }

    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VertexShader).call(this, gl, Object.assign({}, props, {
      shaderType: GL_VERTEX_SHADER
    })));
  } // PRIVATE METHODS


  (0, _createClass2.default)(VertexShader, [{
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createShader(GL_VERTEX_SHADER);
    }
  }]);
  return VertexShader;
}(Shader);

exports.VertexShader = VertexShader;

var FragmentShader =
/*#__PURE__*/
function (_Shader2) {
  (0, _inherits2.default)(FragmentShader, _Shader2);

  function FragmentShader(gl, props) {
    (0, _classCallCheck2.default)(this, FragmentShader);

    // DEPRECATED: Support old constructor signature: FragmentShader(gl, source)
    if (typeof props === 'string') {
      _utils.log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');

      props = {
        source: props
      };
    }

    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FragmentShader).call(this, gl, Object.assign({}, props, {
      shaderType: GL_FRAGMENT_SHADER
    })));
  } // PRIVATE METHODS


  (0, _createClass2.default)(FragmentShader, [{
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createShader(GL_FRAGMENT_SHADER);
    }
  }]);
  return FragmentShader;
}(Shader);

exports.FragmentShader = FragmentShader;
//# sourceMappingURL=shader.js.map