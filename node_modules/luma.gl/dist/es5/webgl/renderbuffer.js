"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RENDERBUFFER_FORMATS = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _webglUtils = require("../webgl-utils");

var _resource = _interopRequireDefault(require("./resource"));

var _assert = _interopRequireDefault(require("../utils/assert"));

var _RENDERBUFFER_FORMATS;

// Define local GL constants to optimize minification
var GL_RENDERBUFFER = 0x8D41;
var GL_SAMPLES = 0x80A9;
var GL_RENDERBUFFER_WIDTH = 0x8D42;
var GL_RENDERBUFFER_HEIGHT = 0x8D43;
var GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
var GL_RENDERBUFFER_SAMPLES = 0x8CAB; // Define local extension strings to optimize minification
// const SRGB = 'EXT_sRGB';
// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';

var CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float'; // const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';

var RENDERBUFFER_FORMATS = (_RENDERBUFFER_FORMATS = {}, (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33189, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33190, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36012, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36168, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 34041, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 35056, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36013, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 32854, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36194, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 32855, {}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33321, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33330, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33329, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33332, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33331, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33334, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33333, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33323, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33336, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33335, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33338, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33337, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33340, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33339, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 32849, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 32856, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 32857, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36220, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36238, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36975, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36214, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36232, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36226, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 36208, {
  gl2: true
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33325, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33327, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 34842, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33326, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 33328, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 34836, {
  gl2: CB_FLOAT_WEBGL2
}), (0, _defineProperty2.default)(_RENDERBUFFER_FORMATS, 35898, {
  gl2: CB_FLOAT_WEBGL2
}), _RENDERBUFFER_FORMATS);
exports.RENDERBUFFER_FORMATS = RENDERBUFFER_FORMATS;

function isFormatSupported(gl, format, formats) {
  var info = formats[format];

  if (!info) {
    return false;
  }

  var value = (0, _webglUtils.isWebGL2)(gl) ? info.gl2 || info.gl1 : info.gl1;

  if (typeof value === 'string') {
    return gl.getExtension(value);
  }

  return value;
}

var Renderbuffer =
/*#__PURE__*/
function (_Resource) {
  (0, _inherits2.default)(Renderbuffer, _Resource);
  (0, _createClass2.default)(Renderbuffer, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format;

      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);
    }
  }, {
    key: "getSamplesForFormat",
    value: function getSamplesForFormat(gl, _ref2) {
      var format = _ref2.format;
      // Polyfilled to return [0] under WebGL1
      return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);
    }
  }]);

  function Renderbuffer(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, Renderbuffer);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Renderbuffer).call(this, gl, opts));

    _this.initialize(opts);

    Object.seal((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    return _this;
  } // Creates and initializes a renderbuffer object's data store


  (0, _createClass2.default)(Renderbuffer, [{
    key: "initialize",
    value: function initialize(_ref3) {
      var format = _ref3.format,
          _ref3$width = _ref3.width,
          width = _ref3$width === void 0 ? 1 : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === void 0 ? 1 : _ref3$height,
          _ref3$samples = _ref3.samples,
          samples = _ref3$samples === void 0 ? 0 : _ref3$samples;
      (0, _assert.default)(format, 'Needs format');
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);

      if (samples !== 0 && (0, _webglUtils.isWebGL2)(this.gl)) {
        this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);
      } else {
        this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);
      } // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);


      this.format = format;
      this.width = width;
      this.height = height;
      this.samples = samples;
      return this;
    }
  }, {
    key: "resize",
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      // Don't resize if width/height haven't changed
      if (width !== this.width || height !== this.height) {
        return this.initialize({
          width: width,
          height: height,
          format: this.format,
          samples: this.samples
        });
      }

      return this;
    } // PRIVATE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createRenderbuffer();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteRenderbuffer(this.handle);
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle(handle) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, handle);
    }
  }, {
    key: "_syncHandle",
    value: function _syncHandle(handle) {
      this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);
      this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);
      this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);
      this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);
    } // @param {Boolean} opt.autobind=true - method call will bind/unbind object
    // @returns {GLenum|GLint} - depends on pname

  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      var value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname); // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      return value;
    }
  }]);
  return Renderbuffer;
}(_resource.default);

exports.default = Renderbuffer;
//# sourceMappingURL=renderbuffer.js.map