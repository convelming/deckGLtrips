"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _webglUtils = require("../webgl-utils");

var _resource = _interopRequireDefault(require("./resource"));

/* eslint-disable no-inline-comments */
var Sampler =
/*#__PURE__*/
function (_Resource) {
  (0, _inherits2.default)(Sampler, _Resource);
  (0, _createClass2.default)(Sampler, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return (0, _webglUtils.isWebGL2)(gl);
    }
  }]);

  function Sampler(gl, opts) {
    var _this;

    (0, _classCallCheck2.default)(this, Sampler);
    (0, _webglUtils.assertWebGL2Context)(gl);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Sampler).call(this, gl, opts));
    Object.seal((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    return _this;
  } // Bind to the same texture unit as a texture to control sampling for that texture
  // @param {GLuint} unit - texture unit index


  (0, _createClass2.default)(Sampler, [{
    key: "bind",
    value: function bind(unit) {
      this.gl.bindSampler(unit, this.handle);
      return this;
    }
  }, {
    key: "unbind",
    value: function unbind(unit) {
      this.gl.bindSampler(unit, null);
      return this;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createSampler();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteSampler(this.handle);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      return this.gl.getSamplerParameter(this.handle, pname);
    }
  }, {
    key: "_setParameter",
    value: function _setParameter(pname, param) {
      // Apparently there are some conversion integer/float rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case 33082:
        case 33083:
          this.gl.samplerParameterf(this.handle, pname, param);
          break;

        default:
          this.gl.samplerParameteri(this.handle, pname, param);
          break;
      }

      return this;
    }
  }]);
  return Sampler;
}(_resource.default);

exports.default = Sampler;
//# sourceMappingURL=sampler.js.map