{"version":3,"sources":["../../../src/multipass/shader-module-pass.js"],"names":["ShaderModuleSinglePass","gl","props","Object","assign","swap","inputBuffer","swapBuffers","model","setUniforms","draw","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest","Pass","ShaderModulePass","module","id","name","passes","normalizePasses","first","pass","CompositePass","filter","sampler","fs","getFragmentShaderForRenderPass","getModel","map","idn","length","ClipSpace","modules","getUniforms","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE"],"mappings":"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","sourcesContent":["//\n// A pass that renders a given texture into screen space\n//\n\nimport Pass from './pass';\nimport CompositePass from './composite-pass';\nimport ClipSpace from '../models/clip-space';\n\nimport {normalizeShaderModule} from '../shadertools/src/lib/filters/normalize-module';\n\nclass ShaderModuleSinglePass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, Object.assign({swap: true}, props));\n  }\n\n  _renderPass({inputBuffer, swapBuffers}) {\n    this.props.model.setUniforms(this.props);\n\n    // swapBuffers();\n    this.props.model.draw({\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n\nexport default class ShaderModulePass extends CompositePass {\n  constructor(gl, module, props = {}) {\n    const id = `${module.name}-pass`;\n    normalizeShaderModule(module);\n    const passes = normalizePasses(gl, module, id, props);\n    super(gl, Object.assign({id, passes}, props));\n    this.module = module;\n  }\n\n  _renderPass({inputBuffer, swapBuffers}) {\n    let first = true;\n    for (const pass of this.module.passes) {\n      if (!first) {\n        swapBuffers();\n      }\n      first = false;\n      if (pass.uniforms) {\n        pass.model.setUniforms(pass.uniforms);\n      }\n      // swapBuffers();\n      pass.model.draw({\n        uniforms: {\n          texture: inputBuffer,\n          texSize: [inputBuffer.width, inputBuffer.height]\n        },\n        parameters: {\n          depthWrite: false,\n          depthTest: false\n        }\n      });\n    }\n  }\n}\n\nfunction normalizePasses(gl, module, id, props) {\n  if (module.filter || module.sampler) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ShaderModuleSinglePass(gl, {\n      id,\n      model: getModel(gl, module, fs, id, props),\n      uniforms: null\n    });\n    return [pass];\n  }\n\n  const passes = module.passes || [];\n  return passes.map(pass => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${passes.length + 1}`;\n\n    return new ShaderModuleSinglePass(gl, Object.assign({\n      id: idn,\n      model: getModel(gl, module, fs, idn, props),\n      uniforms: pass.uniforms\n    }, props));\n  });\n}\n\nfunction getModel(gl, module, fs, id, props) {\n  const model = new ClipSpace(gl, {id, fs, modules: [module]});\n\n  const uniforms = Object.assign(\n    module.getUniforms(),\n    module.getUniforms(props)\n  );\n\n  model.setUniforms(uniforms);\n  return model;\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"file":"shader-module-pass.js"}