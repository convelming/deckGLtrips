"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = injectShader;
exports.combineInjects = combineInjects;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _moduleInjectors = require("../modules/module-injectors");

var _constants = require("./constants");

var _assert = _interopRequireDefault(require("assert"));

var _MODULE_INJECTORS;

// TODO - experimental
var MODULE_INJECTORS = (_MODULE_INJECTORS = {}, (0, _defineProperty2.default)(_MODULE_INJECTORS, _constants.VERTEX_SHADER, _moduleInjectors.MODULE_INJECTORS_VS), (0, _defineProperty2.default)(_MODULE_INJECTORS, _constants.FRAGMENT_SHADER, _moduleInjectors.MODULE_INJECTORS_FS), _MODULE_INJECTORS);
var REGEX_DECLARATIONS = /^(#version[^\n]*\n)?/; // Beginning of file

var REGEX_START_OF_MAIN = /main\s*\([^\)]*\)\s*\{\n?/; // Beginning of main

var REGEX_END_OF_MAIN = /}\n?[^{}]*$/; // End of main, assumes main is last function
// A minimal shader injection/templating system.
// RFC: https://github.com/uber/luma.gl/blob/master/dev-docs/RFCs/v6.0/shader-injection-rfc.md

/* eslint-disable complexity */

function injectShader(source, type, inject, injectStandardStubs) {
  var isVertex = type === _constants.VERTEX_SHADER;

  var _loop = function _loop(key) {
    var fragment = inject[key];

    switch (key) {
      // declarations are injected at beginning of shader
      case 'vs:#decl':
        if (isVertex) {
          source = source.replace(REGEX_DECLARATIONS, function (match) {
            return match + fragment;
          });
        }

        break;
      // main code is injected at the end of main function

      case 'vs:#main-start':
        if (isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return match + fragment;
          });
        }

        break;

      case 'vs:#main-end':
        if (isVertex) {
          source = source.replace(REGEX_END_OF_MAIN, function (match) {
            return fragment + match;
          });
        }

        break;

      case 'fs:#decl':
        if (!isVertex) {
          source = source.replace(REGEX_DECLARATIONS, function (match) {
            return match + fragment;
          });
        }

        break;

      case 'fs:#main-start':
        if (!isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return match + fragment;
          });
        }

        break;

      case 'fs:#main-end':
        if (!isVertex) {
          source = source.replace(REGEX_END_OF_MAIN, function (match) {
            return fragment + match;
          });
        }

        break;

      default:
        // inject code after key, leaving key in place
        source = source.replace(key, function (match) {
          return match + fragment;
        });
    }
  };

  for (var key in inject) {
    _loop(key);
  } // Finally, if requested, insert an automatic module injector chunk


  if (injectStandardStubs) {
    source = source.replace('}\s*$', function (match) {
      return match + MODULE_INJECTORS[type];
    });
  }

  return source;
}
/* eslint-enable complexity */
// Takes an array of inject objects and combines them into one


function combineInjects(injects) {
  var result = {};
  (0, _assert.default)(Array.isArray(injects) && injects.length > 1);
  injects.forEach(function (inject) {
    for (var key in inject) {
      result[key] = result[key] ? "".concat(result[key], "\n").concat(inject[key]) : inject[key];
    }
  });
  return result;
}
//# sourceMappingURL=inject-shader.js.map