import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import { isWebGL2, assertWebGL2Context } from '../webgl-utils';
import { withParameters } from '../webgl-context/context-state';
import Texture from '../webgl/texture';
import Buffer from './buffer';

var Texture3D =
/*#__PURE__*/
function (_Texture) {
  _inherits(Texture3D, _Texture);

  _createClass(Texture3D, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return isWebGL2(gl);
    }
    /**
     * @classdesc
     * 3D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture3D(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture3D);

    assertWebGL2Context(gl);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Texture3D).call(this, gl, Object.assign({}, opts, {
      target: opts.target || 32879
    })));
    _this.width = null;
    _this.height = null;
    _this.depth = null;
    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));

    _this.setImageData(opts);

    if (opts.generateMipmap) {
      _this.generateMipmap();
    }

    return _this;
  }

  _createClass(Texture3D, [{
    key: "initialize",
    value: function initialize() {
      var _this2 = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.opts = Object.assign({}, this.opts, opts);
      var _this$opts = this.opts,
          pixels = _this$opts.pixels,
          settings = _this$opts.settings;

      if (settings) {
        withParameters(settings, function () {
          if (pixels) {
            _this2.setImage3D(_this2.opts);
          }
        });
        this.setParameters(opts);
      }
    } // WebGL2
    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: "setImage3D",
    value: function setImage3D(_ref) {
      var _ref$level = _ref.level,
          level = _ref$level === void 0 ? 0 : _ref$level,
          _ref$internalformat = _ref.internalformat,
          internalformat = _ref$internalformat === void 0 ? 6408 : _ref$internalformat,
          width = _ref.width,
          height = _ref.height,
          _ref$depth = _ref.depth,
          depth = _ref$depth === void 0 ? 1 : _ref$depth,
          _ref$border = _ref.border,
          border = _ref$border === void 0 ? 0 : _ref$border,
          format = _ref.format,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? 5121 : _ref$type,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          pixels = _ref.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return;
      }

      if (pixels instanceof Buffer) {
        this.gl.bindBuffer(35052, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
        this.gl.bindBuffer(35052, pixels.handle);
      }
    }
  }]);

  return Texture3D;
}(Texture);

export { Texture3D as default };
//# sourceMappingURL=texture-3d.js.map