import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";

/* eslint-disable no-inline-comments */
import { isWebGL2, assertWebGL2Context } from '../webgl-utils';
import Resource from './resource';

var Sampler =
/*#__PURE__*/
function (_Resource) {
  _inherits(Sampler, _Resource);

  _createClass(Sampler, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return isWebGL2(gl);
    }
  }]);

  function Sampler(gl, opts) {
    var _this;

    _classCallCheck(this, Sampler);

    assertWebGL2Context(gl);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sampler).call(this, gl, opts));
    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  } // Bind to the same texture unit as a texture to control sampling for that texture
  // @param {GLuint} unit - texture unit index


  _createClass(Sampler, [{
    key: "bind",
    value: function bind(unit) {
      this.gl.bindSampler(unit, this.handle);
      return this;
    }
  }, {
    key: "unbind",
    value: function unbind(unit) {
      this.gl.bindSampler(unit, null);
      return this;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createSampler();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteSampler(this.handle);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      return this.gl.getSamplerParameter(this.handle, pname);
    }
  }, {
    key: "_setParameter",
    value: function _setParameter(pname, param) {
      // Apparently there are some conversion integer/float rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case 33082:
        case 33083:
          this.gl.samplerParameterf(this.handle, pname, param);
          break;

        default:
          this.gl.samplerParameteri(this.handle, pname, param);
          break;
      }

      return this;
    }
  }]);

  return Sampler;
}(Resource);

export { Sampler as default };
//# sourceMappingURL=sampler.js.map