import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import Resource from './resource';
import { assertWebGL2Context } from '../webgl-utils';
import queryManager from '../webgl-utils/query-manager';

var FenceSync =
/*#__PURE__*/
function (_Resource) {
  _inherits(FenceSync, _Resource);

  /*
   * @class
   * @param {WebGL2RenderingContext} gl
   */
  function FenceSync(gl, opts) {
    var _this;

    _classCallCheck(this, FenceSync);

    assertWebGL2Context(gl);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FenceSync).call(this, gl, opts)); // query manager needs a promise field

    _this.promise = null;
    Object.seal(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * The method is a no-op in the absence of the possibility of
   * synchronizing between multiple GL contexts.
   * Prevent commands from being added to GPU command queue.
   * Note: commands can still be buffered in driver.
   *
   * @param {GLbitfield} flags
   * @param {GLint64} timeout
   * @return {Sync} status
   */


  _createClass(FenceSync, [{
    key: "wait",
    value: function wait() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$flags = _ref.flags,
          flags = _ref$flags === void 0 ? 0 : _ref$flags,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === void 0 ? -1 : _ref$timeout;

      this.gl.waitSync(this.handle, flags, timeout);
      return this;
    }
    /**
     * Block all CPU operations until fence is signalled
     * @param {GLbitfield} flags
     * @param {GLint64} timeout
     * @return {GLenum} result
     */

  }, {
    key: "clientWait",
    value: function clientWait(_ref2) {
      var _ref2$flags = _ref2.flags,
          flags = _ref2$flags === void 0 ? 1 : _ref2$flags,
          timeout = _ref2.timeout;
      var result = this.gl.clientWaitSync(this.handle, flags, timeout); // TODO - map to boolean?

      switch (result) {
        case 37146:
          // Indicates that sync object was signaled when this method was called.
          break;

        case 37147:
          // Indicates that timeout time passed, sync object did not become signaled
          break;

        case 37148:
          // Indicates that sync object was signaled before timeout expired.
          break;

        case 37149:
          // Indicates that an error occurred during execution.
          break;

        default:
      }

      return result;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      queryManager.cancelQuery(this);
    }
  }, {
    key: "isSignaled",
    value: function isSignaled() {
      return this.getParameter(37140) === 37145;
    } // TODO - Query manager needs these?

  }, {
    key: "isResultAvailable",
    value: function isResultAvailable() {
      return this.isSignaled();
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.isSignaled();
    }
  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      return this.gl.getSyncParameter(this.handle, pname);
    } // PRIVATE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.fenceSync(37143, 0);
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      queryManager.deleteQuery(this);
      this.gl.deleteSync(this.handle);
    }
  }]);

  return FenceSync;
}(Resource);

export { FenceSync as default };
//# sourceMappingURL=fence-sync.js.map