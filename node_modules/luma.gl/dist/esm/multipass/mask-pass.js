import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
//
// A mask pass.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes
import Pass from './pass';

var MaskPass =
/*#__PURE__*/
function (_Pass) {
  _inherits(MaskPass, _Pass);

  function MaskPass(gl, props) {
    var _this;

    _classCallCheck(this, MaskPass);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaskPass).call(this, gl, Object.assign({
      id: 'mask-pass'
    }, props)));
    _this.inverse = false;
    _this.clearStencil = true;
    return _this;
  }

  _createClass(MaskPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var gl = _ref.gl;
      var writeValue = 1;
      var clearValue = 0;

      if (this.inverse) {
        writeValue = 0;
        clearValue = 1;
      } // don't update color or depth


      gl.colorMask(false, false, false, false);
      gl.depthMask(false); // set up stencil

      gl.enable(2960);
      gl.stencilOp(7681, 7681, 7681);
      gl.stencilFunc(519, writeValue, 0xffffffff);
      gl.clearStencil(clearValue); // TODO - draw into the stencil buffers of the two framebuffers
      // renderer.render(this.scene, this.camera, this.readBuffer, this.clear);
      // renderer.render(this.scene, this.camera, this.writeBuffer, this.clear);
      // re-enable update of color and depth

      gl.colorMask(true, true, true, true);
      gl.depthMask(true); // only render where stencil is set to 1

      gl.stencilFunc(514, 1, 0xffffffff); // draw if == 1

      gl.stencilOp(7680, 7680, 7680);
    }
  }]);

  return MaskPass;
}(Pass);

export { MaskPass as default };
//# sourceMappingURL=mask-pass.js.map