{"version":3,"sources":["../../../src/multipass/canvas.js"],"names":["createGLContext","Model","Texture2D","_MultiPassRenderer","MultiPassRenderer","_ClearPass","ClearPass","_CopyPass","CopyPass","_TexturePass","TexturePass","ShaderModulePass","DEFAULT_VS","Canvas","canvas","document","createElement","width","clientWidth","height","clientHeight","gl","opts","premultipliedAlpha","Error","texture","spareTexture","flippedModel","filters","key","props","filter","bind","element","pixels","resize","realToCSSPixels","displayWidth","Math","floor","displayHeight","style","viewport","node","parentNode","insertBefore","removeChild","multiPassRenderer","screen","render","shaderModule","w","h","array","Uint8Array","drawTo","readPixels","type","getExtension","testTexture","format","error","destroy","extraTexture","vs","fs","isInitialized"],"mappings":"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","sourcesContent":["import 'luma.gl/debug';\n\nimport {\n  createGLContext,\n  Model,\n  Texture2D,\n  _MultiPassRenderer as MultiPassRenderer,\n  _ClearPass as ClearPass,\n  _CopyPass as CopyPass,\n  _TexturePass as TexturePass\n} from 'luma.gl';\n\nimport ShaderModulePass from './shader-module-pass';\n\n/* global document */\n\nconst DEFAULT_VS = `\\\nattribute vec2 vertex;\nattribute vec2 _texCoord;\nvarying vec2 texCoord;\nvoid main() {\n  texCoord = _texCoord;\n  gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);\n}\n`;\n\nexport default class Canvas {\n  constructor() {\n    this.canvas = document.createElement('canvas');\n    this.width = this.canvas.clientWidth;\n    this.height = this.canvas.clientHeight;\n\n    this.gl = createGLContext({canvas: this.canvas, opts: {premultipliedAlpha: false}});\n\n    if (!this.gl) {\n      throw new Error('This browser does not support WebGL');\n    }\n\n    this.texture = null;\n    this.spareTexture = null;\n    this.flippedModel = null;\n  }\n\n  installFiltersAsMethods(filters) {\n    // // Filter methods\n    for (const key in filters) {\n      if (key !== 'canvas') {\n        this[key] = props => this.filter(filters[key], props).bind(this);\n      }\n    }\n  }\n\n  setTexture(element) {\n    this.texture = new Texture2D(this.gl, {pixels: element});\n    this.resize(this.gl, this.texture.width, this.texture.height);\n    return this;\n  }\n\n  resize(gl, width, height) {\n    const realToCSSPixels = 1; // window.devicePixelRatio || 1;\n\n    // Check if the canvas is not the same size.\n    if (gl.canvas.width !== width || gl.canvas.height !== height) {\n\n      // Make the canvas the same size\n      gl.canvas.width = width;\n      gl.canvas.height = height;\n\n      // Lookup the size the browser is displaying the canvas in CSS pixels\n      // and compute a size needed to make our drawingbuffer match it in\n      // device pixels.\n      const displayWidth = Math.floor(width / realToCSSPixels);\n      const displayHeight = Math.floor(height / realToCSSPixels);\n\n      gl.canvas.style.width = `${displayWidth}px`;\n      gl.canvas.style.height = `${displayHeight}px`;\n\n      gl.viewport(0, 0, width, height);\n\n      this.width = displayWidth;\n      this.height = displayHeight;\n    }\n  }\n\n  replace(node) {\n    node.parentNode.insertBefore(this.canvas, node);\n    node.parentNode.removeChild(node);\n    return this;\n  }\n\n  // Draw a texture to the canvas, with an optional width and height to scale to.\n  // If no width and height are given then the original texture width and height\n  // are used.\n  draw() {\n    this.multiPassRenderer = new MultiPassRenderer(this.gl, [\n      new ClearPass(this.gl),\n      new TexturePass(this.gl, {texture: this.texture}),\n      new CopyPass(this.gl, {screen: true})\n    ]);\n\n    this.multiPassRenderer.render();\n\n    return this;\n  }\n\n  update() {\n    this.multiPassRenderer.render({});\n    return this;\n  }\n\n  filter(shaderModule, props) {\n    this.multiPassRenderer = new MultiPassRenderer(this.gl, [\n      new ClearPass(this.gl),\n      new TexturePass(this.gl, {texture: this.texture}),\n      new ShaderModulePass(this.gl, shaderModule, props),\n      new CopyPass(this.gl, {screen: true})\n    ]);\n\n    this.multiPassRenderer.render();\n\n    return this;\n  }\n\n  /*\n  contents() {\n    // const gl = this.gl;\n    // const texture = new Texture2D(this.gl, {\n    //   width: this.texture.width,\n    //   height: this.texture.height,\n    //   format: gl.RGBA,\n    //   type: gl.UNSIGNED_BYTE\n    // });\n    // this.texture.use();\n    // texture.drawTo(() => this.getDefaultModel(this.gl).drawRect());\n    // return wrapTexture(texture);\n  }\n  */\n\n  // Get a Uint8 array of pixel values: [r, g, b, a, r, g, b, a, ...]\n  // Length of the array will be width * height * 4.\n  getPixelArray() {\n    const gl = this.gl;\n    const w = this.texture.width;\n    const h = this.texture.height;\n    const array = new Uint8Array(w * h * 4);\n    this.texture.drawTo(() => gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, array));\n    return array;\n  }\n\n  _initialize(width, height) {\n    const gl = this.gl;\n    let type = gl.UNSIGNED_BYTE;\n\n    // Go for floating point buffer textures if we can, it'll make the bokeh\n    // filter look a lot better. Note that on Windows, ANGLE does not let you\n    // render to a floating-point texture when linear filtering is enabled.\n    // See http://crbug.com/172278 for more information.\n    if (this.gl.getExtension('OES_texture_float') && gl.getExtension('OES_texture_float_linear')) {\n      const testTexture = new Texture2D(this.gl, {\n        width: 100,\n        height: 100,\n        format: gl.RGBA,\n        type: gl.FLOAT\n      });\n\n      try {\n        // Only use gl.FLOAT if we can render to it\n        testTexture.drawTo(() => {\n          type = gl.FLOAT;\n        });\n      } catch (error) {\n        // ignore\n      }\n      testTexture.destroy();\n    }\n\n    if (this.spareTexture) {\n      this.spareTexture.destroy();\n    }\n    this.width = width;\n    this.height = height;\n    this.texture = new Texture2D(this.gl, {width, height, format: gl.RGBA, type});\n    this.spareTexture = new Texture2D(this.gl, {width, height, format: gl.RGBA, type});\n    this.extraTexture = this.extraTexture ||\n      new Texture2D(this.gl, {width: 0, height: 0, format: gl.RGBA, type});\n    this.flippedModel = this.flippedModel || new Model(this.gl, {\n      vs: DEFAULT_VS,\n      fs: `\\\nuniform sampler2D texture;\nvarying vec2 texCoord;\nvoid main() {\n  gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));\n}\n`\n    });\n    this.isInitialized = true;\n  }\n}\n"],"file":"canvas.js"}