import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
//
// A pass that renders a given scene directly on screen or into the read buffer
// for further processing.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes
import Pass from './pass';
import pickModels from '../core/pick-models';

var PickingPass =
/*#__PURE__*/
function (_Pass) {
  _inherits(PickingPass, _Pass);

  function PickingPass(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PickingPass);

    return _possibleConstructorReturn(this, _getPrototypeOf(PickingPass).call(this, gl, Object.assign({
      id: 'picking-pass'
    }, props)));
  }

  _createClass(PickingPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var gl = _ref.gl,
          inputBuffer = _ref.inputBuffer,
          animationProps = _ref.animationProps;
      var props = this.props;
      var pickPosition = animationProps ? animationProps._mousePosition : props.mousePosition;
      var useDevicePixels = animationProps ? animationProps.useDevicePixels : props.useDevicePixels; // Clear picking position if not available

      if (!pickPosition) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.props.models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var model = _step.value;
            model.updateModuleSettings({
              pickingSelectedColor: null
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return;
      }

      var pickInfo = pickModels(gl, {
        models: this.props.models,
        position: pickPosition,
        useDevicePixels: useDevicePixels,
        framebuffer: inputBuffer // Use as temporary frame buffer

      }); // Highlight it

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.props.models[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _model = _step2.value;

          if (pickInfo && pickInfo.model === _model) {
            var pickingSelectedColor = pickInfo && pickInfo.color || null;

            _model.updateModuleSettings({
              pickingSelectedColor: pickingSelectedColor
            });
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return PickingPass;
}(Pass);

export { PickingPass as default };
//# sourceMappingURL=picking-pass.js.map