{"version":3,"sources":["../../../src/core/transform.js"],"names":["Model","Buffer","Framebuffer","Texture2D","TransformFeedback","_transform","transform","getPassthroughFS","typeToChannelCount","isWebGL2","assertWebGL2Context","getShaderVersion","cloneTextureFrom","assert","log","isObjectEmpty","updateForTextures","SRC_TEX_PARAMETER_OVERRIDES","FS_OUTPUT_VARIABLE","Transform","gl","props","model","elementCount","currentIndex","sourceBuffers","Array","sourceTextures","feedbackBuffers","targetTextures","transformFeedbacks","framebuffers","_createdBuffers","elementIDBuffer","_initialize","Object","seal","name","delete","varyingName","attachments","packed","getData","targetTextureVarying","pixels","readPixels","ArrayType","constructor","channelCount","targetTextureType","packedPixels","length","packCount","i","j","samplerUniforms","current","attributes","assign","hasSourceTextures","transform_elementID","sampler","samplerTextureMap","textureName","_setSourceTextureParameters","opts","_getInputs","uniforms","parameters","clearRenderTarget","framebuffer","discard","renderingToTexture","viewport","width","height","clear","COLOR_BUFFER_BIT","setAttributes","transformFeedback","deprecated","swap","feedbackMap","_swapTexture","_setElementCount","bufferName","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","_sourceTextures","_targetTexture","targetTexture","_getDestinationTexture","update","_setupSwapTextures","index","setParameters","_updateElementIDBuffer","setVertexCount","_validateProps","varyings","_targetTextureVarying","varyingsArray","isArray","values","_setupBuffers","_setupTextures","_buildModel","id","drawMode","destinationBuffers","sourceDestinationMap","vs","keys","texture","textureOrAttribute","refTexture","pixelStore","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","buffer","next","srcName","dstName","_getShaders","fs","modules","inject","vertexCount","_setupTransformFeedback","_setupFramebuffers","program","buffers","elementIds","Float32Array","forEach","_","array","data","size","setData","_processVertexShader","version","input","inputType","output","concat","sourceTextureMap"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport Framebuffer from '../webgl/framebuffer';\nimport Texture2D from '../webgl/texture-2d';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {\n  _transform as transform,\n  getPassthroughFS,\n  typeToChannelCount\n} from '../shadertools/src';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion, cloneTextureFrom} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log, isObjectEmpty} from '../utils';\nimport {updateForTextures} from './transform-shader-utils';\n\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.currentIndex = 0;\n\n    // Source and destination resources are stored in two element Arrays for easier swapping when\n    // 'feedbackMap' is provided. If not only the first array elment is used.\n\n    // Each array element is an object with attribute name as Key and Buffer object as value.\n    this.sourceBuffers = new Array(2);\n\n    // Each array element is an object with attribute name as Key and Texture object as value.\n    this.sourceTextures = new Array(2);\n\n    // Each array element is an object with varying name as Key and Buffer object as value.\n    this.feedbackBuffers = new Array(2);\n\n    // Each array element is a Texture object used as color attachment for framebuffer.\n    this.targetTextures = new Array(2);\n\n    // Each array element is a TransformFeedback object.\n    this.transformFeedbacks = new Array(2);\n\n    // Each array element is a Framebuffer object.\n    this.framebuffers = new Array(2);\n    this._createdBuffers = {};\n    this.elementIDBuffer = null;\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._createdBuffers) {\n      this._createdBuffers[name].delete();\n    }\n    this.model.delete();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    assert(varyingName && this.feedbackBuffers[this.currentIndex][varyingName]);\n    return this.feedbackBuffers[this.currentIndex][varyingName];\n  }\n\n  // Returns the color attachment textuer from current framebuffer target\n  _getTargetTexture() {\n    if (this.framebuffers[this.currentIndex]) {\n      return this.framebuffers[this.currentIndex].attachments[GL.COLOR_ATTACHMENT0];\n    }\n    return null;\n  }\n\n  // Return data either from Buffer or from Texture\n  getData({varyingName = null, packed = false} = {}) {\n    // Either there should be specified feedbackBuffer or we should be rendering to a texture\n    if (varyingName && this.feedbackBuffers[this.currentIndex][varyingName]) {\n      return this.feedbackBuffers[this.currentIndex][varyingName].getData();\n    }\n\n    // When varyingName is not provided return data from framebuffer object.\n    assert(!varyingName || varyingName === this.targetTextureVarying);\n\n    const pixels = this.framebuffers[this.currentIndex].readPixels();\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType(pixels.length * channelCount / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  _getInputs() {\n    const samplerUniforms = {};\n    const current = this.currentIndex;\n\n    // Buffer inputs\n    const attributes = Object.assign({}, this.sourceBuffers[current]);\n\n    // Texture inputs\n    if (this.hasSourceTextures || this.targetTextureVarying) {\n      // TODO: add option not generate position using element id.\n      attributes.transform_elementID = this.elementIDBuffer;\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        samplerUniforms[sampler] = this.sourceTextures[current][textureName];\n      }\n      this._setSourceTextureParameters();\n    }\n    return {attributes, samplerUniforms};\n  }\n\n  // Run one transform feedback loop.\n  run(opts = {}) {\n    const {attributes, samplerUniforms} = this._getInputs();\n    const uniforms = Object.assign({}, samplerUniforms, opts.uniforms);;\n    const parameters = Object.assign({}, opts.parameters);\n    const {clearRenderTarget = true} = opts;\n    let framebuffer = null;\n    let discard = true;\n\n    if (this.renderingToTexture) {\n      discard = false;\n      framebuffer = this.framebuffers[this.currentIndex];\n      assert(framebuffer);\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height]\n      if (clearRenderTarget) {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      }\n    }\n    this.model.setAttributes(attributes);\n    this.model.transform(Object.assign({}, opts, {\n      transformFeedback: this.transformFeedbacks[this.currentIndex],\n      uniforms,\n      discard,\n      framebuffer,\n      parameters,\n    }));\n  }\n\n  // Swap source and destination buffers and textures.\n  swapBuffers() {\n    log.deprecated('swapBuffers()', 'swap()');\n    this.swap();\n  }\n\n  // Swap source and destination buffers and textures.\n  swap() {\n    assert(this.feedbackMap || this._swapTexture);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update(opts = {}) {\n\n    if (opts.elementCount) {\n        this._setElementCount(opts.elementCount);\n    }\n\n    const {sourceBuffers = null, feedbackBuffers = null} = opts;\n    const {currentIndex} = this;\n    if (sourceBuffers || feedbackBuffers) {\n      for (const bufferName in feedbackBuffers) {\n        assert(feedbackBuffers[bufferName] instanceof Buffer);\n      }\n\n      Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n      Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n      this._createFeedbackBuffers({feedbackBuffers});\n      if (this.transformFeedbacks[currentIndex]) {\n        this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n      }\n\n      // Buffers have changed, need to re-setup swap buffers.\n      this._setupSwapBuffers();\n    }\n\n    const {_sourceTextures, _targetTexture} = opts;\n    if (_sourceTextures || _targetTexture) {\n      Object.assign(this.sourceTextures[currentIndex], _sourceTextures);\n      const targetTexture = this._getDestinationTexture(_targetTexture);\n      if (targetTexture) {\n        this.targetTextures[currentIndex] =  this._getDestinationTexture(_targetTexture);\n        this.framebuffers[currentIndex].update({\n          [GL.COLOR_ATTACHMENT0]: this.targetTextures[currentIndex]\n        });\n      }\n      // textures have changed, need to re-setup swap textures.\n      this._setupSwapTextures();\n    }\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    for (const name in this.sourceTextures[index]) {\n      this.sourceTextures[index][name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  // set element count and updated elementID buffer if needed.\n  _setElementCount(elementCount) {\n    if (this.elementCount === elementCount) {\n      return;\n    }\n    if (this.elementCount < elementCount) {\n      this._updateElementIDBuffer(elementCount);\n    }\n    this.model.setVertexCount(elementCount);\n    this.elementCount = elementCount;\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {feedbackBuffers, feedbackMap} = this._validateProps(props);\n    const {sourceBuffers, varyings, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    let varyingsArray = varyings;\n    if (feedbackMap && !Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n    this.varyingsArray = varyingsArray;\n    this.feedbackMap = feedbackMap;\n    this._swapTexture = _swapTexture;\n    if (_targetTexture) {\n      this.targetTextureVarying = _targetTextureVarying;\n      this.renderingToTexture = true;\n      assert(this.targetTextureVarying);\n    }\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupTextures(props);\n    this._setupSwapBuffers();\n    this._setupSwapTextures();\n    this._buildModel(Object.assign({}, props, {\n      id: props.id || 'transform-model',\n      drawMode: props.drawMode || GL.POINTS,\n      varyings: varyingsArray\n    }));\n  }\n\n  // assert on required parameters\n  /* eslint-disable complexity */\n  _validateProps(props) {\n    let {feedbackBuffers, feedbackMap} = props;\n\n    // backward compitability\n    const {destinationBuffers, sourceDestinationMap} = props;\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    // assert on required parameters\n    const {vs, elementCount, varyings} = props;\n    const {_sourceTextures, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    assert(\n      vs &&\n      // destinations are provided\n      (varyings || feedbackMap || _targetTexture) &&\n      // when only writting to textures auto-duduce from texture dimenstions\n      elementCount\n    );\n\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n    for (const textureName in _sourceTextures || {}) {\n      assert(_sourceTextures[textureName] instanceof Texture2D);\n    }\n\n    // If rendering to texture , varying is provided\n    assert (!_targetTexture || _targetTextureVarying);\n\n    // swap texture must be a valid source texture\n    assert(!_swapTexture || _sourceTextures[_swapTexture]);\n\n    return {feedbackBuffers, feedbackMap};\n  }\n  /* eslint-enable complexity */\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // setup source and destination textures\n  _setupTextures(props = {}) {\n    const {_sourceTextures, _targetTexture} = props;\n    // Setup source texture\n    this.sourceTextures[0] = Object.assign({}, _sourceTextures);\n    this.sourceTextures[1] = {};\n    this.hasSourceTextures = Object.keys(this.sourceTextures[0]).length > 0;\n\n    if (this.targetTextureVarying) {\n      const texture = this._getDestinationTexture(_targetTexture);\n      // Either a texture or refAttribute must be provided\n      assert(texture);\n      this.targetTextures[0] = texture;\n      this.targetTextures[1] = null;\n    }\n  }\n\n  _getDestinationTexture(textureOrAttribute) {\n\n    if (textureOrAttribute instanceof Texture2D) {\n      return textureOrAttribute;\n    }\n    const refTexture = this.sourceTextures[0][textureOrAttribute];\n    if (!refTexture) {\n      return null;\n    }\n    return cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (feedbackBufferName !== this.targetTextureVarying &&\n          (!feedbackBuffers || !feedbackBuffers[feedbackBufferName])\n      ) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._createdBuffers[feedbackBufferName]) {\n          this._createdBuffers[feedbackBufferName].delete();\n        }\n        this._createdBuffers[feedbackBufferName] = buffer;\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this._createdBuffers[name]) {\n      this._createdBuffers[name].delete();\n      this._createdBuffers[name] = buffer;\n    }\n    return buffer;\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    // Copy all buffers/textures so un-mapped sources will remain same\n    Object.assign(this.sourceBuffers[next], this.sourceBuffers[current]);\n    Object.assign(this.feedbackBuffers[next], this.feedbackBuffers[current]);\n\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      // TODO: add textureMap and remove this if loop\n      if (dstName !== this.targetTextureVarying) {\n        this.sourceBuffers[next][srcName] =\n          this.feedbackBuffers[current][dstName];\n        this.feedbackBuffers[next][dstName] =\n          this.sourceBuffers[current][srcName];\n\n        // make sure the new destination buffer is a Buffer object\n        assert(this.feedbackBuffers[next][dstName] instanceof Buffer);\n      }\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n\n    // TODO: add swap support for targetTexture and framebuffers\n  }\n\n\n  // setup textures for swapping.\n  _setupSwapTextures() {\n    if (!this._swapTexture || !this.targetTextureVarying) {\n      // Must be rendering to a texture and _swapTexture is provided\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    Object.assign(this.sourceTextures[next], this.sourceTextures[current]);\n\n    this.sourceTextures[next][this._swapTexture] = this.targetTextures[current];\n    this.targetTextures[next] = this.sourceTextures[current][this._swapTexture];\n\n    // When triggered by `update()` Framebuffer objects are already set up,\n    // if so update buffers\n    if (this.framebuffers[next]) {\n      this.framebuffers[next].update({\n        [GL.COLOR_ATTACHMENT0]: this.targetTextures[next]\n      });\n    }\n\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel(props = {}) {\n\n    const {vs, fs, modules, uniforms, inject, samplerTextureMap} = this._getShaders(props);\n    this.model = new Model(this.gl, Object.assign({}, props, {\n      vs,\n      fs,\n      vertexCount: props.elementCount,\n      modules,\n      uniforms,\n      inject\n    }));\n    this.samplerTextureMap = samplerTextureMap;\n\n    // setup TF to capture varyings.\n    this._setupTransformFeedback();\n\n    // setup Framebuffer object for rendering to Texture.\n    this._setupFramebuffers();\n\n    // create buffer to access source texture pixesl.\n    this._setElementCount(props.elementCount);\n\n  }\n\n  // setup TransformFeedback objects to capture the results\n  _setupTransformFeedback() {\n    if (isObjectEmpty(this.feedbackBuffers[0])) {\n      return;\n    }\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n\n  // setup framebuffers with texture attachments, to which results are rendered\n  _setupFramebuffers() {\n    if (!this.renderingToTexture) {\n      return;\n    }\n\n    let {width, height} = this.targetTextures[0];\n    this.framebuffers[0] = new Framebuffer(this.gl, {\n      id: `${this.id || 'transform'}-framebuffer-0`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: this.targetTextures[0]\n      }\n    });\n\n    if (this._swapTexture) {\n      ({width, height} = this.targetTextures[1]);\n\n      this.framebuffers[1] = new Framebuffer(this.gl, {\n        id: `${this.id || 'transform'}-framebuffer-1`,\n        width,\n        height,\n        attachments: {\n          [GL.COLOR_ATTACHMENT0]: this.targetTextures[1]\n        }\n      });\n    }\n  }\n\n  // create/update buffer to access source texture's individual pixels.\n  _updateElementIDBuffer(elementCount) {\n    if (!this.hasSourceTextures && !this.targetTextureVarying) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {data: elementIds, size: 1});\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n  }\n\n  // build and return shader releated parameters\n  _getShaders(props = {}) {\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = this._processVertexShader(props.vs);\n    this.targetTextureType = targetTextureType;\n    const fs = getPassthroughFS({\n      version: getShaderVersion(vs),\n      input: this.targetTextureVarying,\n      inputType: targetTextureType,\n      output: FS_OUTPUT_VARIABLE\n    });\n    const modules = this.hasSourceTextures || this.targetTextureVarying ?\n      [transform].concat(props.modules || []) : props.modules;\n    return {vs, fs, modules, uniforms, inject, samplerTextureMap};\n  }\n\n  // scan and update vertex shader for texture atrributes.\n  _processVertexShader(vs) {\n    return updateForTextures({\n      vs,\n      sourceTextureMap: this.sourceTextures[this.currentIndex],\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture: this.targetTextures[this.currentIndex]\n    });\n  }\n}\n"],"file":"transform.js"}