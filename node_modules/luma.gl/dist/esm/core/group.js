import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import Object3D from './object-3d';
import { Matrix4 } from 'math.gl';
import assert from '../utils/assert';

var Group =
/*#__PURE__*/
function (_Object3D) {
  _inherits(Group, _Object3D);

  function Group() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Group);

    opts = Array.isArray(opts) ? {
      children: opts
    } : opts;
    var _opts = opts,
        _opts$children = _opts.children,
        children = _opts$children === void 0 ? [] : _opts$children;
    children.every(function (child) {
      return assert(child instanceof Object3D);
    });
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Group).call(this, opts));
    _this.children = children;
    return _this;
  } // Unpacks arrays and nested arrays of children


  _createClass(Group, [{
    key: "add",
    value: function add() {
      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      for (var _i = 0; _i < children.length; _i++) {
        var child = children[_i];

        if (Array.isArray(child)) {
          this.add.apply(this, _toConsumableArray(child));
        } else {
          this.children.push(child);
        }
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(child) {
      var children = this.children;
      var indexOf = children.indexOf(child);

      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }

      return this;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      this.children = [];
      return this;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverse`. Otherwise `traverse` will return null.

  }, {
    key: "traverse",
    value: function traverse(visitor) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === void 0 ? new Matrix4() : _ref$modelMatrix;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;
          var matrix = child.matrix;
          modelMatrix = modelMatrix.multiplyRight(matrix);
          var result = void 0;

          if (child instanceof Group) {
            result = child.traverse(visitor, {
              modelMatrix: modelMatrix
            });
          } else {
            // child.setUniforms({modelMatrix});
            result = visitor(child, {});
          } // Abort if a result was returned


          if (result) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.

  }, {
    key: "traverseReverse",
    value: function traverseReverse(visitor) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$modelMatrix = _ref2.modelMatrix,
          modelMatrix = _ref2$modelMatrix === void 0 ? new Matrix4() : _ref2$modelMatrix;

      for (var i = this.children.length - 1; i >= 0; --i) {
        var child = this.children[i];
        var matrix = child.matrix;
        modelMatrix = modelMatrix.multiplyRight(matrix);
        var result = void 0;

        if (child instanceof Group) {
          result = child.traverseReverse(visitor, {
            modelMatrix: modelMatrix
          });
        } else {
          // child.setUniforms({modelMatrix});
          result = visitor(child, {});
        } // Abort if a result was returned


        if (result) {
          return result;
        }
      }

      return null;
    }
  }]);

  return Group;
}(Object3D);

export { Group as default };
//# sourceMappingURL=group.js.map