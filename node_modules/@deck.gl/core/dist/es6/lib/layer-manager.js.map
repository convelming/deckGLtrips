{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Framebuffer","_ShaderCache","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","log","flatten","Stats","Viewport","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","shaderCache","pickingFBO","lastPickedInfo","animationProps","userData","layerName","layer","LayerManager","constructor","viewport","lastRenderedLayers","layers","context","assign","_cachePrograms","id","index","layerId","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_activateViewport","bind","_initSeer","_editSeer","finalize","removeListener","needsRedraw","clearRedrawFlags","_checkIfNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","indexOf","setProps","props","setLayers","newLayers","Boolean","_updateLayers","oldLayers","error","generatedLayers","updateLayers","pass","viewports","views","redrawReason","customRender","onViewportActive","x","y","mode","radius","depth","_getPickingBuffer","pickObjects","width","height","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","model","getModels","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value","map"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, _ShaderCache as ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: null,\n\n  animationProps: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {stats, viewport = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      lastPickedInfo: {\n        // For callback tracking and autohighlight\n        index: -1,\n        layerId: null\n      },\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}) // Current viewport, exposed to layers for project* function\n    });\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    this._activateViewport = this._activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({\n    pass = 'render to screen',\n    viewports,\n    views,\n    redrawReason = 'unknown reason',\n    customRender = false\n  }) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports,\n      views,\n      onViewportActive: this._activateViewport,\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason,\n      customRender\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, viewports, depth = 1}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter: this.layerFilter,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, viewports}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter: this.layerFilter,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err)();\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`)();\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}