import { Vector3, clamp } from 'math.gl'; // Return the closest point on a line segment

export function getClosestPointOnLine({
  p,
  p1,
  p2,
  clampToLine = true
}) {
  const lineVector = new Vector3(p2).subtract(p1);
  const pointVector = new Vector3(p).subtract(p1);
  let dotProduct = lineVector.dot(pointVector);

  if (clampToLine) {
    dotProduct = clamp(dotProduct, 0, 1);
  }

  return lineVector.lerp(dotProduct);
} // Return the closest point on a line segment

export function getClosestPointOnPolyline({
  p,
  points
}) {
  p = new Vector3(p);
  let pClosest = null;
  let distanceSquared = Infinity;
  let index = -1;

  for (let i = 0; i < points.length - 1; ++i) {
    const p1 = points[i];
    const p2 = points[i + 1];
    const pClosestOnLine = getClosestPointOnLine({
      p,
      p1,
      p2
    });
    const distanceToLineSquared = p.distanceSquared(pClosestOnLine);

    if (distanceToLineSquared < distanceSquared) {
      distanceSquared = distanceToLineSquared;
      pClosest = pClosestOnLine;
      index = i;
    }
  }

  return {
    point: pClosest,
    index,
    p1: points[index],
    p2: points[index + 1],
    distanceSquared,
    distance: Math.sqrt(distanceSquared)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRoLW1hcmtlci1sYXllci9wb2x5bGluZS5qcyJdLCJuYW1lcyI6WyJWZWN0b3IzIiwiY2xhbXAiLCJnZXRDbG9zZXN0UG9pbnRPbkxpbmUiLCJwIiwicDEiLCJwMiIsImNsYW1wVG9MaW5lIiwibGluZVZlY3RvciIsInN1YnRyYWN0IiwicG9pbnRWZWN0b3IiLCJkb3RQcm9kdWN0IiwiZG90IiwibGVycCIsImdldENsb3Nlc3RQb2ludE9uUG9seWxpbmUiLCJwb2ludHMiLCJwQ2xvc2VzdCIsImRpc3RhbmNlU3F1YXJlZCIsIkluZmluaXR5IiwiaW5kZXgiLCJpIiwibGVuZ3RoIiwicENsb3Nlc3RPbkxpbmUiLCJkaXN0YW5jZVRvTGluZVNxdWFyZWQiLCJwb2ludCIsImRpc3RhbmNlIiwiTWF0aCIsInNxcnQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVFBLE9BQVIsRUFBaUJDLEtBQWpCLFFBQTZCLFNBQTdCLEMsQ0FFQTs7QUFDQSxPQUFPLFNBQVNDLHFCQUFULENBQStCO0FBQUNDLEVBQUFBLENBQUQ7QUFBSUMsRUFBQUEsRUFBSjtBQUFRQyxFQUFBQSxFQUFSO0FBQVlDLEVBQUFBLFdBQVcsR0FBRztBQUExQixDQUEvQixFQUFnRTtBQUNyRSxRQUFNQyxVQUFVLEdBQUcsSUFBSVAsT0FBSixDQUFZSyxFQUFaLEVBQWdCRyxRQUFoQixDQUF5QkosRUFBekIsQ0FBbkI7QUFDQSxRQUFNSyxXQUFXLEdBQUcsSUFBSVQsT0FBSixDQUFZRyxDQUFaLEVBQWVLLFFBQWYsQ0FBd0JKLEVBQXhCLENBQXBCO0FBQ0EsTUFBSU0sVUFBVSxHQUFHSCxVQUFVLENBQUNJLEdBQVgsQ0FBZUYsV0FBZixDQUFqQjs7QUFDQSxNQUFJSCxXQUFKLEVBQWlCO0FBQ2ZJLElBQUFBLFVBQVUsR0FBR1QsS0FBSyxDQUFDUyxVQUFELEVBQWEsQ0FBYixFQUFnQixDQUFoQixDQUFsQjtBQUNEOztBQUNELFNBQU9ILFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQkYsVUFBaEIsQ0FBUDtBQUNELEMsQ0FFRDs7QUFDQSxPQUFPLFNBQVNHLHlCQUFULENBQW1DO0FBQUNWLEVBQUFBLENBQUQ7QUFBSVcsRUFBQUE7QUFBSixDQUFuQyxFQUFnRDtBQUNyRFgsRUFBQUEsQ0FBQyxHQUFHLElBQUlILE9BQUosQ0FBWUcsQ0FBWixDQUFKO0FBQ0EsTUFBSVksUUFBUSxHQUFHLElBQWY7QUFDQSxNQUFJQyxlQUFlLEdBQUdDLFFBQXRCO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBYjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdMLE1BQU0sQ0FBQ00sTUFBUCxHQUFnQixDQUFwQyxFQUF1QyxFQUFFRCxDQUF6QyxFQUE0QztBQUMxQyxVQUFNZixFQUFFLEdBQUdVLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFqQjtBQUNBLFVBQU1kLEVBQUUsR0FBR1MsTUFBTSxDQUFDSyxDQUFDLEdBQUcsQ0FBTCxDQUFqQjtBQUNBLFVBQU1FLGNBQWMsR0FBR25CLHFCQUFxQixDQUFDO0FBQUNDLE1BQUFBLENBQUQ7QUFBSUMsTUFBQUEsRUFBSjtBQUFRQyxNQUFBQTtBQUFSLEtBQUQsQ0FBNUM7QUFDQSxVQUFNaUIscUJBQXFCLEdBQUduQixDQUFDLENBQUNhLGVBQUYsQ0FBa0JLLGNBQWxCLENBQTlCOztBQUNBLFFBQUlDLHFCQUFxQixHQUFHTixlQUE1QixFQUE2QztBQUMzQ0EsTUFBQUEsZUFBZSxHQUFHTSxxQkFBbEI7QUFDQVAsTUFBQUEsUUFBUSxHQUFHTSxjQUFYO0FBQ0FILE1BQUFBLEtBQUssR0FBR0MsQ0FBUjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTztBQUNMSSxJQUFBQSxLQUFLLEVBQUVSLFFBREY7QUFFTEcsSUFBQUEsS0FGSztBQUdMZCxJQUFBQSxFQUFFLEVBQUVVLE1BQU0sQ0FBQ0ksS0FBRCxDQUhMO0FBSUxiLElBQUFBLEVBQUUsRUFBRVMsTUFBTSxDQUFDSSxLQUFLLEdBQUcsQ0FBVCxDQUpMO0FBS0xGLElBQUFBLGVBTEs7QUFNTFEsSUFBQUEsUUFBUSxFQUFFQyxJQUFJLENBQUNDLElBQUwsQ0FBVVYsZUFBVjtBQU5MLEdBQVA7QUFRRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmVjdG9yMywgY2xhbXB9IGZyb20gJ21hdGguZ2wnO1xuXG4vLyBSZXR1cm4gdGhlIGNsb3Nlc3QgcG9pbnQgb24gYSBsaW5lIHNlZ21lbnRcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbG9zZXN0UG9pbnRPbkxpbmUoe3AsIHAxLCBwMiwgY2xhbXBUb0xpbmUgPSB0cnVlfSkge1xuICBjb25zdCBsaW5lVmVjdG9yID0gbmV3IFZlY3RvcjMocDIpLnN1YnRyYWN0KHAxKTtcbiAgY29uc3QgcG9pbnRWZWN0b3IgPSBuZXcgVmVjdG9yMyhwKS5zdWJ0cmFjdChwMSk7XG4gIGxldCBkb3RQcm9kdWN0ID0gbGluZVZlY3Rvci5kb3QocG9pbnRWZWN0b3IpO1xuICBpZiAoY2xhbXBUb0xpbmUpIHtcbiAgICBkb3RQcm9kdWN0ID0gY2xhbXAoZG90UHJvZHVjdCwgMCwgMSk7XG4gIH1cbiAgcmV0dXJuIGxpbmVWZWN0b3IubGVycChkb3RQcm9kdWN0KTtcbn1cblxuLy8gUmV0dXJuIHRoZSBjbG9zZXN0IHBvaW50IG9uIGEgbGluZSBzZWdtZW50XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xvc2VzdFBvaW50T25Qb2x5bGluZSh7cCwgcG9pbnRzfSkge1xuICBwID0gbmV3IFZlY3RvcjMocCk7XG4gIGxldCBwQ2xvc2VzdCA9IG51bGw7XG4gIGxldCBkaXN0YW5jZVNxdWFyZWQgPSBJbmZpbml0eTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGNvbnN0IHAxID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IHAyID0gcG9pbnRzW2kgKyAxXTtcbiAgICBjb25zdCBwQ2xvc2VzdE9uTGluZSA9IGdldENsb3Nlc3RQb2ludE9uTGluZSh7cCwgcDEsIHAyfSk7XG4gICAgY29uc3QgZGlzdGFuY2VUb0xpbmVTcXVhcmVkID0gcC5kaXN0YW5jZVNxdWFyZWQocENsb3Nlc3RPbkxpbmUpO1xuICAgIGlmIChkaXN0YW5jZVRvTGluZVNxdWFyZWQgPCBkaXN0YW5jZVNxdWFyZWQpIHtcbiAgICAgIGRpc3RhbmNlU3F1YXJlZCA9IGRpc3RhbmNlVG9MaW5lU3F1YXJlZDtcbiAgICAgIHBDbG9zZXN0ID0gcENsb3Nlc3RPbkxpbmU7XG4gICAgICBpbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IHBDbG9zZXN0LFxuICAgIGluZGV4LFxuICAgIHAxOiBwb2ludHNbaW5kZXhdLFxuICAgIHAyOiBwb2ludHNbaW5kZXggKyAxXSxcbiAgICBkaXN0YW5jZVNxdWFyZWQsXG4gICAgZGlzdGFuY2U6IE1hdGguc3FydChkaXN0YW5jZVNxdWFyZWQpXG4gIH07XG59XG4iXX0=