// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { IconLayer } from '@deck.gl/layers';
import vs from './advanced-text-layer-vertex.glsl';
import fs from './advanced-text-layer-fragment.glsl'; // TODO: provide more props

const defaultProps = IconLayer.defaultProps;
export default class TextMultiIconLayer extends IconLayer {
  getShaders() {
    return Object.assign({}, super.getShaders(), {
      vs,
      fs
    });
  }

  draw({
    uniforms
  }) {
    const _this$props = this.props,
          fontSmoothing = _this$props.fontSmoothing,
          sizeScale = _this$props.sizeScale;
    super.draw({
      uniforms: Object.assign({}, uniforms, {
        // TODO: handle for individual sizes using this.props.getSize()
        smoothing: sizeScale > 0 ? fontSmoothing / sizeScale : 0
      })
    });
  }

  calculateInstanceOffsets(attribute) {
    const data = this.props.data;
    const value = attribute.value;
    let i = 0;

    for (const object of data) {
      value[i++] = object.x;
      value[i++] = object.y;
    }
  }

}
TextMultiIconLayer.layerName = 'TextMultiIconLayer';
TextMultiIconLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZHZhbmNlZC10ZXh0LWxheWVyL3RleHQtbXVsdGktaWNvbi1sYXllci5qcyJdLCJuYW1lcyI6WyJJY29uTGF5ZXIiLCJ2cyIsImZzIiwiZGVmYXVsdFByb3BzIiwiVGV4dE11bHRpSWNvbkxheWVyIiwiZ2V0U2hhZGVycyIsIk9iamVjdCIsImFzc2lnbiIsImRyYXciLCJ1bmlmb3JtcyIsInByb3BzIiwiZm9udFNtb290aGluZyIsInNpemVTY2FsZSIsInNtb290aGluZyIsImNhbGN1bGF0ZUluc3RhbmNlT2Zmc2V0cyIsImF0dHJpYnV0ZSIsImRhdGEiLCJ2YWx1ZSIsImkiLCJvYmplY3QiLCJ4IiwieSIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxTQUFRQSxTQUFSLFFBQXdCLGlCQUF4QjtBQUNBLE9BQU9DLEVBQVAsTUFBZSxtQ0FBZjtBQUNBLE9BQU9DLEVBQVAsTUFBZSxxQ0FBZixDLENBRUE7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHSCxTQUFTLENBQUNHLFlBQS9CO0FBRUEsZUFBZSxNQUFNQyxrQkFBTixTQUFpQ0osU0FBakMsQ0FBMkM7QUFDeERLLEVBQUFBLFVBQVUsR0FBRztBQUNYLFdBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0IsTUFBTUYsVUFBTixFQUFsQixFQUFzQztBQUFDSixNQUFBQSxFQUFEO0FBQUtDLE1BQUFBO0FBQUwsS0FBdEMsQ0FBUDtBQUNEOztBQUVETSxFQUFBQSxJQUFJLENBQUM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFELEVBQWE7QUFBQSx3QkFDb0IsS0FBS0MsS0FEekI7QUFBQSxVQUNSQyxhQURRLGVBQ1JBLGFBRFE7QUFBQSxVQUNPQyxTQURQLGVBQ09BLFNBRFA7QUFHZixVQUFNSixJQUFOLENBQVc7QUFDVEMsTUFBQUEsUUFBUSxFQUFFSCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCRSxRQUFsQixFQUE0QjtBQUNwQztBQUNBSSxRQUFBQSxTQUFTLEVBQUVELFNBQVMsR0FBRyxDQUFaLEdBQWdCRCxhQUFhLEdBQUdDLFNBQWhDLEdBQTRDO0FBRm5CLE9BQTVCO0FBREQsS0FBWDtBQU1EOztBQUVERSxFQUFBQSx3QkFBd0IsQ0FBQ0MsU0FBRCxFQUFZO0FBQUEsVUFDM0JDLElBRDJCLEdBQ25CLEtBQUtOLEtBRGMsQ0FDM0JNLElBRDJCO0FBQUEsVUFFM0JDLEtBRjJCLEdBRWxCRixTQUZrQixDQUUzQkUsS0FGMkI7QUFHbEMsUUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsU0FBSyxNQUFNQyxNQUFYLElBQXFCSCxJQUFyQixFQUEyQjtBQUN6QkMsTUFBQUEsS0FBSyxDQUFDQyxDQUFDLEVBQUYsQ0FBTCxHQUFhQyxNQUFNLENBQUNDLENBQXBCO0FBQ0FILE1BQUFBLEtBQUssQ0FBQ0MsQ0FBQyxFQUFGLENBQUwsR0FBYUMsTUFBTSxDQUFDRSxDQUFwQjtBQUNEO0FBQ0Y7O0FBeEJ1RDtBQTJCMURqQixrQkFBa0IsQ0FBQ2tCLFNBQW5CLEdBQStCLG9CQUEvQjtBQUNBbEIsa0JBQWtCLENBQUNELFlBQW5CLEdBQWtDQSxZQUFsQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge0ljb25MYXllcn0gZnJvbSAnQGRlY2suZ2wvbGF5ZXJzJztcbmltcG9ydCB2cyBmcm9tICcuL2FkdmFuY2VkLXRleHQtbGF5ZXItdmVydGV4Lmdsc2wnO1xuaW1wb3J0IGZzIGZyb20gJy4vYWR2YW5jZWQtdGV4dC1sYXllci1mcmFnbWVudC5nbHNsJztcblxuLy8gVE9ETzogcHJvdmlkZSBtb3JlIHByb3BzXG5jb25zdCBkZWZhdWx0UHJvcHMgPSBJY29uTGF5ZXIuZGVmYXVsdFByb3BzO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0TXVsdGlJY29uTGF5ZXIgZXh0ZW5kcyBJY29uTGF5ZXIge1xuICBnZXRTaGFkZXJzKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdXBlci5nZXRTaGFkZXJzKCksIHt2cywgZnN9KTtcbiAgfVxuXG4gIGRyYXcoe3VuaWZvcm1zfSkge1xuICAgIGNvbnN0IHtmb250U21vb3RoaW5nLCBzaXplU2NhbGV9ID0gdGhpcy5wcm9wcztcblxuICAgIHN1cGVyLmRyYXcoe1xuICAgICAgdW5pZm9ybXM6IE9iamVjdC5hc3NpZ24oe30sIHVuaWZvcm1zLCB7XG4gICAgICAgIC8vIFRPRE86IGhhbmRsZSBmb3IgaW5kaXZpZHVhbCBzaXplcyB1c2luZyB0aGlzLnByb3BzLmdldFNpemUoKVxuICAgICAgICBzbW9vdGhpbmc6IHNpemVTY2FsZSA+IDAgPyBmb250U21vb3RoaW5nIC8gc2l6ZVNjYWxlIDogMFxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUluc3RhbmNlT2Zmc2V0cyhhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCB7ZGF0YX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHt2YWx1ZX0gPSBhdHRyaWJ1dGU7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIGRhdGEpIHtcbiAgICAgIHZhbHVlW2krK10gPSBvYmplY3QueDtcbiAgICAgIHZhbHVlW2krK10gPSBvYmplY3QueTtcbiAgICB9XG4gIH1cbn1cblxuVGV4dE11bHRpSWNvbkxheWVyLmxheWVyTmFtZSA9ICdUZXh0TXVsdGlJY29uTGF5ZXInO1xuVGV4dE11bHRpSWNvbkxheWVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbiJdfQ==