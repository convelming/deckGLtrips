"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClosestPointOnLine = getClosestPointOnLine;
exports.getClosestPointOnPolyline = getClosestPointOnPolyline;

var _math = require("math.gl");

// Return the closest point on a line segment
function getClosestPointOnLine(_ref) {
  var p = _ref.p,
      p1 = _ref.p1,
      p2 = _ref.p2,
      _ref$clampToLine = _ref.clampToLine,
      clampToLine = _ref$clampToLine === void 0 ? true : _ref$clampToLine;
  var lineVector = new _math.Vector3(p2).subtract(p1);
  var pointVector = new _math.Vector3(p).subtract(p1);
  var dotProduct = lineVector.dot(pointVector);

  if (clampToLine) {
    dotProduct = (0, _math.clamp)(dotProduct, 0, 1);
  }

  return lineVector.lerp(dotProduct);
} // Return the closest point on a line segment


function getClosestPointOnPolyline(_ref2) {
  var p = _ref2.p,
      points = _ref2.points;
  p = new _math.Vector3(p);
  var pClosest = null;
  var distanceSquared = Infinity;
  var index = -1;

  for (var i = 0; i < points.length - 1; ++i) {
    var p1 = points[i];
    var p2 = points[i + 1];
    var pClosestOnLine = getClosestPointOnLine({
      p: p,
      p1: p1,
      p2: p2
    });
    var distanceToLineSquared = p.distanceSquared(pClosestOnLine);

    if (distanceToLineSquared < distanceSquared) {
      distanceSquared = distanceToLineSquared;
      pClosest = pClosestOnLine;
      index = i;
    }
  }

  return {
    point: pClosest,
    index: index,
    p1: points[index],
    p2: points[index + 1],
    distanceSquared: distanceSquared,
    distance: Math.sqrt(distanceSquared)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRoLW1hcmtlci1sYXllci9wb2x5bGluZS5qcyJdLCJuYW1lcyI6WyJnZXRDbG9zZXN0UG9pbnRPbkxpbmUiLCJwIiwicDEiLCJwMiIsImNsYW1wVG9MaW5lIiwibGluZVZlY3RvciIsIlZlY3RvcjMiLCJzdWJ0cmFjdCIsInBvaW50VmVjdG9yIiwiZG90UHJvZHVjdCIsImRvdCIsImxlcnAiLCJnZXRDbG9zZXN0UG9pbnRPblBvbHlsaW5lIiwicG9pbnRzIiwicENsb3Nlc3QiLCJkaXN0YW5jZVNxdWFyZWQiLCJJbmZpbml0eSIsImluZGV4IiwiaSIsImxlbmd0aCIsInBDbG9zZXN0T25MaW5lIiwiZGlzdGFuY2VUb0xpbmVTcXVhcmVkIiwicG9pbnQiLCJkaXN0YW5jZSIsIk1hdGgiLCJzcXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ08sU0FBU0EscUJBQVQsT0FBZ0U7QUFBQSxNQUFoQ0MsQ0FBZ0MsUUFBaENBLENBQWdDO0FBQUEsTUFBN0JDLEVBQTZCLFFBQTdCQSxFQUE2QjtBQUFBLE1BQXpCQyxFQUF5QixRQUF6QkEsRUFBeUI7QUFBQSw4QkFBckJDLFdBQXFCO0FBQUEsTUFBckJBLFdBQXFCLGlDQUFQLElBQU87QUFDckUsTUFBTUMsVUFBVSxHQUFHLElBQUlDLGFBQUosQ0FBWUgsRUFBWixFQUFnQkksUUFBaEIsQ0FBeUJMLEVBQXpCLENBQW5CO0FBQ0EsTUFBTU0sV0FBVyxHQUFHLElBQUlGLGFBQUosQ0FBWUwsQ0FBWixFQUFlTSxRQUFmLENBQXdCTCxFQUF4QixDQUFwQjtBQUNBLE1BQUlPLFVBQVUsR0FBR0osVUFBVSxDQUFDSyxHQUFYLENBQWVGLFdBQWYsQ0FBakI7O0FBQ0EsTUFBSUosV0FBSixFQUFpQjtBQUNmSyxJQUFBQSxVQUFVLEdBQUcsaUJBQU1BLFVBQU4sRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBYjtBQUNEOztBQUNELFNBQU9KLFVBQVUsQ0FBQ00sSUFBWCxDQUFnQkYsVUFBaEIsQ0FBUDtBQUNELEMsQ0FFRDs7O0FBQ08sU0FBU0cseUJBQVQsUUFBZ0Q7QUFBQSxNQUFaWCxDQUFZLFNBQVpBLENBQVk7QUFBQSxNQUFUWSxNQUFTLFNBQVRBLE1BQVM7QUFDckRaLEVBQUFBLENBQUMsR0FBRyxJQUFJSyxhQUFKLENBQVlMLENBQVosQ0FBSjtBQUNBLE1BQUlhLFFBQVEsR0FBRyxJQUFmO0FBQ0EsTUFBSUMsZUFBZSxHQUFHQyxRQUF0QjtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFDLENBQWI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxNQUFNLENBQUNNLE1BQVAsR0FBZ0IsQ0FBcEMsRUFBdUMsRUFBRUQsQ0FBekMsRUFBNEM7QUFDMUMsUUFBTWhCLEVBQUUsR0FBR1csTUFBTSxDQUFDSyxDQUFELENBQWpCO0FBQ0EsUUFBTWYsRUFBRSxHQUFHVSxNQUFNLENBQUNLLENBQUMsR0FBRyxDQUFMLENBQWpCO0FBQ0EsUUFBTUUsY0FBYyxHQUFHcEIscUJBQXFCLENBQUM7QUFBQ0MsTUFBQUEsQ0FBQyxFQUFEQSxDQUFEO0FBQUlDLE1BQUFBLEVBQUUsRUFBRkEsRUFBSjtBQUFRQyxNQUFBQSxFQUFFLEVBQUZBO0FBQVIsS0FBRCxDQUE1QztBQUNBLFFBQU1rQixxQkFBcUIsR0FBR3BCLENBQUMsQ0FBQ2MsZUFBRixDQUFrQkssY0FBbEIsQ0FBOUI7O0FBQ0EsUUFBSUMscUJBQXFCLEdBQUdOLGVBQTVCLEVBQTZDO0FBQzNDQSxNQUFBQSxlQUFlLEdBQUdNLHFCQUFsQjtBQUNBUCxNQUFBQSxRQUFRLEdBQUdNLGNBQVg7QUFDQUgsTUFBQUEsS0FBSyxHQUFHQyxDQUFSO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPO0FBQ0xJLElBQUFBLEtBQUssRUFBRVIsUUFERjtBQUVMRyxJQUFBQSxLQUFLLEVBQUxBLEtBRks7QUFHTGYsSUFBQUEsRUFBRSxFQUFFVyxNQUFNLENBQUNJLEtBQUQsQ0FITDtBQUlMZCxJQUFBQSxFQUFFLEVBQUVVLE1BQU0sQ0FBQ0ksS0FBSyxHQUFHLENBQVQsQ0FKTDtBQUtMRixJQUFBQSxlQUFlLEVBQWZBLGVBTEs7QUFNTFEsSUFBQUEsUUFBUSxFQUFFQyxJQUFJLENBQUNDLElBQUwsQ0FBVVYsZUFBVjtBQU5MLEdBQVA7QUFRRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmVjdG9yMywgY2xhbXB9IGZyb20gJ21hdGguZ2wnO1xuXG4vLyBSZXR1cm4gdGhlIGNsb3Nlc3QgcG9pbnQgb24gYSBsaW5lIHNlZ21lbnRcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbG9zZXN0UG9pbnRPbkxpbmUoe3AsIHAxLCBwMiwgY2xhbXBUb0xpbmUgPSB0cnVlfSkge1xuICBjb25zdCBsaW5lVmVjdG9yID0gbmV3IFZlY3RvcjMocDIpLnN1YnRyYWN0KHAxKTtcbiAgY29uc3QgcG9pbnRWZWN0b3IgPSBuZXcgVmVjdG9yMyhwKS5zdWJ0cmFjdChwMSk7XG4gIGxldCBkb3RQcm9kdWN0ID0gbGluZVZlY3Rvci5kb3QocG9pbnRWZWN0b3IpO1xuICBpZiAoY2xhbXBUb0xpbmUpIHtcbiAgICBkb3RQcm9kdWN0ID0gY2xhbXAoZG90UHJvZHVjdCwgMCwgMSk7XG4gIH1cbiAgcmV0dXJuIGxpbmVWZWN0b3IubGVycChkb3RQcm9kdWN0KTtcbn1cblxuLy8gUmV0dXJuIHRoZSBjbG9zZXN0IHBvaW50IG9uIGEgbGluZSBzZWdtZW50XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xvc2VzdFBvaW50T25Qb2x5bGluZSh7cCwgcG9pbnRzfSkge1xuICBwID0gbmV3IFZlY3RvcjMocCk7XG4gIGxldCBwQ2xvc2VzdCA9IG51bGw7XG4gIGxldCBkaXN0YW5jZVNxdWFyZWQgPSBJbmZpbml0eTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGNvbnN0IHAxID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IHAyID0gcG9pbnRzW2kgKyAxXTtcbiAgICBjb25zdCBwQ2xvc2VzdE9uTGluZSA9IGdldENsb3Nlc3RQb2ludE9uTGluZSh7cCwgcDEsIHAyfSk7XG4gICAgY29uc3QgZGlzdGFuY2VUb0xpbmVTcXVhcmVkID0gcC5kaXN0YW5jZVNxdWFyZWQocENsb3Nlc3RPbkxpbmUpO1xuICAgIGlmIChkaXN0YW5jZVRvTGluZVNxdWFyZWQgPCBkaXN0YW5jZVNxdWFyZWQpIHtcbiAgICAgIGRpc3RhbmNlU3F1YXJlZCA9IGRpc3RhbmNlVG9MaW5lU3F1YXJlZDtcbiAgICAgIHBDbG9zZXN0ID0gcENsb3Nlc3RPbkxpbmU7XG4gICAgICBpbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IHBDbG9zZXN0LFxuICAgIGluZGV4LFxuICAgIHAxOiBwb2ludHNbaW5kZXhdLFxuICAgIHAyOiBwb2ludHNbaW5kZXggKyAxXSxcbiAgICBkaXN0YW5jZVNxdWFyZWQsXG4gICAgZGlzdGFuY2U6IE1hdGguc3FydChkaXN0YW5jZVNxdWFyZWQpXG4gIH07XG59XG4iXX0=