"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@deck.gl/core");

var _gpuGridCellLayer = _interopRequireDefault(require("./gpu-grid-cell-layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MINCOLOR = [0, 0, 0, 255];
var MAXCOLOR = [0, 255, 0, 255];
var defaultProps = {
  // elevation
  elevationScale: 1,
  // grid
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  getPosition: function getPosition(x) {
    return x.position;
  },
  extruded: false,
  fp64: false,
  pickable: false,
  // TODO: Enable picking with GPU Aggregation
  // Optional settings for 'lighting' shader module
  lightSettings: {},
  // GPU Aggregation
  gpuAggregation: true
};

var GPUGridLayer =
/*#__PURE__*/
function (_CompositeLayer) {
  _inherits(GPUGridLayer, _CompositeLayer);

  function GPUGridLayer() {
    _classCallCheck(this, GPUGridLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridLayer).apply(this, arguments));
  }

  _createClass(GPUGridLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var options = {
        id: "".concat(this.id, "-gpu-aggregator"),
        shaderCache: this.context.shaderCache
      };
      this.state = {
        gpuGridAggregator: new _core._GPUGridAggregator(gl, options)
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;
      var reprojectNeeded = this.needsReProjectPoints(oldProps, props);

      if (changeFlags.dataChanged || reprojectNeeded) {
        // project data into hexagons, and get sortedBins
        this.getLayerData();
      }
    }
  }, {
    key: "needsReProjectPoints",
    value: function needsReProjectPoints(oldProps, props) {
      return oldProps.cellSize !== props.cellSize || oldProps.gpuAggregation !== props.gpuAggregation || oldProps.getPosition !== props.getPosition;
    }
  }, {
    key: "getLayerData",
    value: function getLayerData() {
      var _this$props = this.props,
          data = _this$props.data,
          cellSizeMeters = _this$props.cellSize,
          getPosition = _this$props.getPosition,
          gpuAggregation = _this$props.gpuAggregation;

      var _pointToDensityGridDa = (0, _core._pointToDensityGridData)({
        data: data,
        cellSizeMeters: cellSizeMeters,
        getPosition: getPosition,
        gpuAggregation: gpuAggregation,
        gpuGridAggregator: this.state.gpuGridAggregator
      }),
          countsBuffer = _pointToDensityGridDa.countsBuffer,
          maxCountBuffer = _pointToDensityGridDa.maxCountBuffer,
          gridSize = _pointToDensityGridDa.gridSize,
          gridOrigin = _pointToDensityGridDa.gridOrigin,
          cellSize = _pointToDensityGridDa.cellSize;

      this.setState({
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        cellSize: cellSize
      });
    } // for subclassing, override this method to return
    // customized sub layer props

  }, {
    key: "getSubLayerProps",
    value: function getSubLayerProps() {
      var _this$props2 = this.props,
          elevationScale = _this$props2.elevationScale,
          fp64 = _this$props2.fp64,
          extruded = _this$props2.extruded,
          cellSizeMeters = _this$props2.cellSize,
          coverage = _this$props2.coverage,
          lightSettings = _this$props2.lightSettings;
      var _this$state = this.state,
          countsBuffer = _this$state.countsBuffer,
          maxCountBuffer = _this$state.maxCountBuffer,
          gridSize = _this$state.gridSize,
          gridOrigin = _this$state.gridOrigin,
          cellSize = _this$state.cellSize;
      var minColor = MINCOLOR;
      var maxColor = MAXCOLOR; // return props to the sublayer constructor

      return _get(_getPrototypeOf(GPUGridLayer.prototype), "getSubLayerProps", this).call(this, {
        id: 'grid-cell',
        data: this.state.layerData,
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOffset: cellSize,
        numInstances: gridSize[0] * gridSize[1],
        minColor: minColor,
        maxColor: maxColor,
        fp64: fp64,
        cellSize: cellSizeMeters,
        coverage: coverage,
        lightSettings: lightSettings,
        elevationScale: elevationScale,
        extruded: extruded,
        pickable: false
      });
    } // for subclassing, override this method to return
    // customized sub layer class

  }, {
    key: "getSubLayerClass",
    value: function getSubLayerClass() {
      return _gpuGridCellLayer.default;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var SubLayerClass = this.getSubLayerClass();
      return new SubLayerClass(this.getSubLayerProps());
    }
  }]);

  return GPUGridLayer;
}(_core.CompositeLayer);

exports.default = GPUGridLayer;
GPUGridLayer.layerName = 'GridLayer';
GPUGridLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,