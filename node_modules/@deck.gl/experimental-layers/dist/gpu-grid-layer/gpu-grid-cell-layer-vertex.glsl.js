"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Inspired by screen-grid-layer vertex shader in deck.gl
var _default = "#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec4 instanceCounts;\n\n// Custom uniforms\nuniform float extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\n\nuniform vec2 gridSize;\nuniform vec2 gridOrigin;\nuniform vec2 gridOriginLow;\nuniform vec2 gridOffset;\nuniform vec2 gridOffsetLow;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nlayout(std140) uniform;\nuniform AggregationData\n{\n  vec4 maxCount;\n} aggregationData;\n\n#define ELEVATION_SCALE 100.\n\n// Result\nout vec4 vColor;\n\nvoid main(void) {\n\n  float noRender = float(instanceCounts.g <= 0.0);\n\n  float step = instanceCounts.g / aggregationData.maxCount.w;\n  vec4 color = mix(minColor, maxColor, step) / 255.;\n\n  // TODO: discard when noRender is true\n  float finalCellSize = project_scale(cellSize) * mix(1.0, 0.0, noRender);\n  // float finalCellSize = project_scale(cellSize);\n\n\n  float elevation = 0.0;\n\n  if (extruded > 0.5) {\n    elevation = instanceCounts.g  * (positions.z + 1.0) *\n      ELEVATION_SCALE * elevationScale;\n  }\n\n  float yIndex = floor(float(gl_InstanceID) / gridSize[0]);\n  float xIndex = float(gl_InstanceID) - (yIndex * gridSize[0]);\n\n  // Keeping 32-bit calculations for debugging, to be removed.\n  // float instancePositionX = gridOffset[0] * xIndex + gridOrigin[0];\n  // float instancePositionY = gridOffset[1] * yIndex + gridOrigin[1];\n  // vec3 extrudedPosition = vec3(instancePositionX, instancePositionY, elevation);\n  // vec2 extrudedPosition64xyLow = vec2(0., 0.);\n\n  vec2 instancePositionXFP64 = mul_fp64(vec2(gridOffset[0], gridOffsetLow[0]), vec2(xIndex, 0.));\n  instancePositionXFP64 = sum_fp64(instancePositionXFP64, vec2(gridOrigin[0], gridOriginLow[0]));\n  vec2 instancePositionYFP64 = mul_fp64(vec2(gridOffset[1], gridOffsetLow[1]), vec2(yIndex, 0.));\n  instancePositionYFP64 = sum_fp64(instancePositionYFP64, vec2(gridOrigin[1], gridOriginLow[1]));\n  vec3 extrudedPosition = vec3(instancePositionXFP64[0], instancePositionYFP64[0], elevation);\n  vec2 extrudedPosition64xyLow = vec2(instancePositionXFP64[1], instancePositionYFP64[1]);\n\n  vec3 offset = vec3(\n    (positions.x * coverage + 1.0) / 2.0 * finalCellSize,\n    (positions.y * coverage - 1.0) / 2.0 * finalCellSize,\n    1.0);\n\n  // extrude positions\n  vec4 position_worldspace;\n  gl_Position = project_position_to_clipspace(extrudedPosition, extrudedPosition64xyLow, offset, position_worldspace);\n\n  float lightWeight = 1.0;\n\n  if (extruded > 0.5) {\n    lightWeight = lighting_getLightWeight(\n      position_worldspace.xyz, // the w component is always 1.0\n      normals\n    );\n  }\n\n  vec3 lightWeightedColor = lightWeight * color.rgb;\n  vColor = vec4(lightWeightedColor, color.a * opacity);\n}\n";
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncHUtZ3JpZC1sYXllci9ncHUtZ3JpZC1jZWxsLWxheWVyLXZlcnRleC5nbHNsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTUgLSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLy8gSW5zcGlyZWQgYnkgc2NyZWVuLWdyaWQtbGF5ZXIgdmVydGV4IHNoYWRlciBpbiBkZWNrLmdsXG5cbmV4cG9ydCBkZWZhdWx0IGBcXFxuI3ZlcnNpb24gMzAwIGVzXG4jZGVmaW5lIFNIQURFUl9OQU1FIGdwdS1ncmlkLWNlbGwtbGF5ZXItdmVydGV4LXNoYWRlclxuXG5pbiB2ZWMzIHBvc2l0aW9ucztcbmluIHZlYzMgbm9ybWFscztcblxuaW4gdmVjNCBpbnN0YW5jZUNvdW50cztcblxuLy8gQ3VzdG9tIHVuaWZvcm1zXG51bmlmb3JtIGZsb2F0IGV4dHJ1ZGVkO1xudW5pZm9ybSBmbG9hdCBjZWxsU2l6ZTtcbnVuaWZvcm0gZmxvYXQgY292ZXJhZ2U7XG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG51bmlmb3JtIGZsb2F0IGVsZXZhdGlvblNjYWxlO1xuXG51bmlmb3JtIHZlYzIgZ3JpZFNpemU7XG51bmlmb3JtIHZlYzIgZ3JpZE9yaWdpbjtcbnVuaWZvcm0gdmVjMiBncmlkT3JpZ2luTG93O1xudW5pZm9ybSB2ZWMyIGdyaWRPZmZzZXQ7XG51bmlmb3JtIHZlYzIgZ3JpZE9mZnNldExvdztcbnVuaWZvcm0gdmVjNCBtaW5Db2xvcjtcbnVuaWZvcm0gdmVjNCBtYXhDb2xvcjtcbmxheW91dChzdGQxNDApIHVuaWZvcm07XG51bmlmb3JtIEFnZ3JlZ2F0aW9uRGF0YVxue1xuICB2ZWM0IG1heENvdW50O1xufSBhZ2dyZWdhdGlvbkRhdGE7XG5cbiNkZWZpbmUgRUxFVkFUSU9OX1NDQUxFIDEwMC5cblxuLy8gUmVzdWx0XG5vdXQgdmVjNCB2Q29sb3I7XG5cbnZvaWQgbWFpbih2b2lkKSB7XG5cbiAgZmxvYXQgbm9SZW5kZXIgPSBmbG9hdChpbnN0YW5jZUNvdW50cy5nIDw9IDAuMCk7XG5cbiAgZmxvYXQgc3RlcCA9IGluc3RhbmNlQ291bnRzLmcgLyBhZ2dyZWdhdGlvbkRhdGEubWF4Q291bnQudztcbiAgdmVjNCBjb2xvciA9IG1peChtaW5Db2xvciwgbWF4Q29sb3IsIHN0ZXApIC8gMjU1LjtcblxuICAvLyBUT0RPOiBkaXNjYXJkIHdoZW4gbm9SZW5kZXIgaXMgdHJ1ZVxuICBmbG9hdCBmaW5hbENlbGxTaXplID0gcHJvamVjdF9zY2FsZShjZWxsU2l6ZSkgKiBtaXgoMS4wLCAwLjAsIG5vUmVuZGVyKTtcbiAgLy8gZmxvYXQgZmluYWxDZWxsU2l6ZSA9IHByb2plY3Rfc2NhbGUoY2VsbFNpemUpO1xuXG5cbiAgZmxvYXQgZWxldmF0aW9uID0gMC4wO1xuXG4gIGlmIChleHRydWRlZCA+IDAuNSkge1xuICAgIGVsZXZhdGlvbiA9IGluc3RhbmNlQ291bnRzLmcgICogKHBvc2l0aW9ucy56ICsgMS4wKSAqXG4gICAgICBFTEVWQVRJT05fU0NBTEUgKiBlbGV2YXRpb25TY2FsZTtcbiAgfVxuXG4gIGZsb2F0IHlJbmRleCA9IGZsb29yKGZsb2F0KGdsX0luc3RhbmNlSUQpIC8gZ3JpZFNpemVbMF0pO1xuICBmbG9hdCB4SW5kZXggPSBmbG9hdChnbF9JbnN0YW5jZUlEKSAtICh5SW5kZXggKiBncmlkU2l6ZVswXSk7XG5cbiAgLy8gS2VlcGluZyAzMi1iaXQgY2FsY3VsYXRpb25zIGZvciBkZWJ1Z2dpbmcsIHRvIGJlIHJlbW92ZWQuXG4gIC8vIGZsb2F0IGluc3RhbmNlUG9zaXRpb25YID0gZ3JpZE9mZnNldFswXSAqIHhJbmRleCArIGdyaWRPcmlnaW5bMF07XG4gIC8vIGZsb2F0IGluc3RhbmNlUG9zaXRpb25ZID0gZ3JpZE9mZnNldFsxXSAqIHlJbmRleCArIGdyaWRPcmlnaW5bMV07XG4gIC8vIHZlYzMgZXh0cnVkZWRQb3NpdGlvbiA9IHZlYzMoaW5zdGFuY2VQb3NpdGlvblgsIGluc3RhbmNlUG9zaXRpb25ZLCBlbGV2YXRpb24pO1xuICAvLyB2ZWMyIGV4dHJ1ZGVkUG9zaXRpb242NHh5TG93ID0gdmVjMigwLiwgMC4pO1xuXG4gIHZlYzIgaW5zdGFuY2VQb3NpdGlvblhGUDY0ID0gbXVsX2ZwNjQodmVjMihncmlkT2Zmc2V0WzBdLCBncmlkT2Zmc2V0TG93WzBdKSwgdmVjMih4SW5kZXgsIDAuKSk7XG4gIGluc3RhbmNlUG9zaXRpb25YRlA2NCA9IHN1bV9mcDY0KGluc3RhbmNlUG9zaXRpb25YRlA2NCwgdmVjMihncmlkT3JpZ2luWzBdLCBncmlkT3JpZ2luTG93WzBdKSk7XG4gIHZlYzIgaW5zdGFuY2VQb3NpdGlvbllGUDY0ID0gbXVsX2ZwNjQodmVjMihncmlkT2Zmc2V0WzFdLCBncmlkT2Zmc2V0TG93WzFdKSwgdmVjMih5SW5kZXgsIDAuKSk7XG4gIGluc3RhbmNlUG9zaXRpb25ZRlA2NCA9IHN1bV9mcDY0KGluc3RhbmNlUG9zaXRpb25ZRlA2NCwgdmVjMihncmlkT3JpZ2luWzFdLCBncmlkT3JpZ2luTG93WzFdKSk7XG4gIHZlYzMgZXh0cnVkZWRQb3NpdGlvbiA9IHZlYzMoaW5zdGFuY2VQb3NpdGlvblhGUDY0WzBdLCBpbnN0YW5jZVBvc2l0aW9uWUZQNjRbMF0sIGVsZXZhdGlvbik7XG4gIHZlYzIgZXh0cnVkZWRQb3NpdGlvbjY0eHlMb3cgPSB2ZWMyKGluc3RhbmNlUG9zaXRpb25YRlA2NFsxXSwgaW5zdGFuY2VQb3NpdGlvbllGUDY0WzFdKTtcblxuICB2ZWMzIG9mZnNldCA9IHZlYzMoXG4gICAgKHBvc2l0aW9ucy54ICogY292ZXJhZ2UgKyAxLjApIC8gMi4wICogZmluYWxDZWxsU2l6ZSxcbiAgICAocG9zaXRpb25zLnkgKiBjb3ZlcmFnZSAtIDEuMCkgLyAyLjAgKiBmaW5hbENlbGxTaXplLFxuICAgIDEuMCk7XG5cbiAgLy8gZXh0cnVkZSBwb3NpdGlvbnNcbiAgdmVjNCBwb3NpdGlvbl93b3JsZHNwYWNlO1xuICBnbF9Qb3NpdGlvbiA9IHByb2plY3RfcG9zaXRpb25fdG9fY2xpcHNwYWNlKGV4dHJ1ZGVkUG9zaXRpb24sIGV4dHJ1ZGVkUG9zaXRpb242NHh5TG93LCBvZmZzZXQsIHBvc2l0aW9uX3dvcmxkc3BhY2UpO1xuXG4gIGZsb2F0IGxpZ2h0V2VpZ2h0ID0gMS4wO1xuXG4gIGlmIChleHRydWRlZCA+IDAuNSkge1xuICAgIGxpZ2h0V2VpZ2h0ID0gbGlnaHRpbmdfZ2V0TGlnaHRXZWlnaHQoXG4gICAgICBwb3NpdGlvbl93b3JsZHNwYWNlLnh5eiwgLy8gdGhlIHcgY29tcG9uZW50IGlzIGFsd2F5cyAxLjBcbiAgICAgIG5vcm1hbHNcbiAgICApO1xuICB9XG5cbiAgdmVjMyBsaWdodFdlaWdodGVkQ29sb3IgPSBsaWdodFdlaWdodCAqIGNvbG9yLnJnYjtcbiAgdkNvbG9yID0gdmVjNChsaWdodFdlaWdodGVkQ29sb3IsIGNvbG9yLmEgKiBvcGFjaXR5KTtcbn1cbmA7XG4iXX0=