function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i["return"]||_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}import{createElement}from"react";import PropTypes from"prop-types";import BaseControl from"./base-control";import{getDynamicPosition,ANCHOR_POSITION}from"../utils/dynamic-position";const propTypes=Object.assign({},BaseControl.propTypes,{className:PropTypes.string,longitude:PropTypes.number.isRequired,latitude:PropTypes.number.isRequired,offsetLeft:PropTypes.number,offsetTop:PropTypes.number,tipSize:PropTypes.number,closeButton:PropTypes.bool,closeOnClick:PropTypes.bool,anchor:PropTypes.oneOf(Object.keys(ANCHOR_POSITION)),dynamicPosition:PropTypes.bool,onClose:PropTypes.func}),defaultProps=Object.assign({},BaseControl.defaultProps,{className:"",offsetLeft:0,offsetTop:0,tipSize:10,anchor:"bottom",dynamicPosition:!0,closeButton:!0,closeOnClick:!0,onClose:()=>{}});export default class Popup extends BaseControl{constructor(props){super(props),this._getPosition=this._getPosition.bind(this),this._onClose=this._onClose.bind(this),this._contentLoaded=this._contentLoaded.bind(this),this._renderTip=this._renderTip.bind(this),this._renderContent=this._renderContent.bind(this),this._closeOnClick=!1}componentDidMount(){this.forceUpdate()}_getPosition(x,y){const viewport=this.context.viewport,_this$props=this.props,anchor=_this$props.anchor,dynamicPosition=_this$props.dynamicPosition,tipSize=_this$props.tipSize;return this._content?dynamicPosition?getDynamicPosition({x,y,anchor,padding:tipSize,width:viewport.width,height:viewport.height,selfWidth:this._content.clientWidth,selfHeight:this._content.clientHeight}):anchor:anchor}_onClick(evt){this.props.captureClick&&evt.stopPropagation(),(this.props.closeOnClick||this._closeOnClick)&&this.props.onClose()}_onClose(){this._closeOnClick=!0}_contentLoaded(ref){this._content=ref}_renderTip(){const tipSize=this.props.tipSize;return createElement("div",{key:"tip",className:"mapboxgl-popup-tip",style:{borderWidth:tipSize}})}_renderContent(){const _this$props2=this.props,closeButton=_this$props2.closeButton,children=_this$props2.children;return createElement("div",{key:"content",ref:this._contentLoaded,className:"mapboxgl-popup-content"},[closeButton&&createElement("button",{key:"close-button",className:"mapboxgl-popup-close-button",type:"button",onClick:this._onClose},"\xD7"),children])}render(){const _this$props3=this.props,className=_this$props3.className,longitude=_this$props3.longitude,latitude=_this$props3.latitude,offsetLeft=_this$props3.offsetLeft,offsetTop=_this$props3.offsetTop,_this$context$viewpor=this.context.viewport.project([longitude,latitude]),_this$context$viewpor2=_slicedToArray(_this$context$viewpor,2),x=_this$context$viewpor2[0],y=_this$context$viewpor2[1],positionType=this._getPosition(x,y),anchorPosition=ANCHOR_POSITION[positionType],containerStyle={position:"absolute",left:x+offsetLeft,top:y+offsetTop,transform:`translate(${100*-anchorPosition.x}%, ${100*-anchorPosition.y}%)`};return createElement("div",{className:`mapboxgl-popup mapboxgl-popup-anchor-${positionType} ${className}`,style:containerStyle,ref:this._onContainerLoad},[this._renderTip(),this._renderContent()])}}Popup.displayName="Popup",Popup.propTypes=propTypes,Popup.defaultProps=defaultProps;
//# sourceMappingURL=popup.js.map