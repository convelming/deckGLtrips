import{PureComponent,createElement}from"react";import PropTypes from"prop-types";import StaticMap from"./static-map";import{MAPBOX_LIMITS}from"../utils/map-state";import WebMercatorViewport from"viewport-mercator-project";import TransitionManager from"../utils/transition-manager";import{getInteractiveLayerIds}from"../utils/style-utils";import{EventManager}from"mjolnir.js";import MapControls from"../utils/map-controls";import config from"../config";import deprecateWarn from"../utils/deprecate-warn";const propTypes=Object.assign({},StaticMap.propTypes,{maxZoom:PropTypes.number,minZoom:PropTypes.number,maxPitch:PropTypes.number,minPitch:PropTypes.number,onViewStateChange:PropTypes.func,onViewportChange:PropTypes.func,transitionDuration:PropTypes.number,transitionInterpolator:PropTypes.object,transitionInterruption:PropTypes.number,transitionEasing:PropTypes.func,onTransitionStart:PropTypes.func,onTransitionInterrupt:PropTypes.func,onTransitionEnd:PropTypes.func,scrollZoom:PropTypes.bool,dragPan:PropTypes.bool,dragRotate:PropTypes.bool,doubleClickZoom:PropTypes.bool,touchZoom:PropTypes.bool,touchRotate:PropTypes.bool,keyboard:PropTypes.bool,onHover:PropTypes.func,onClick:PropTypes.func,onContextMenu:PropTypes.func,touchAction:PropTypes.string,clickRadius:PropTypes.number,getCursor:PropTypes.func,mapControls:PropTypes.shape({events:PropTypes.arrayOf(PropTypes.string),handleEvent:PropTypes.func})}),getDefaultCursor=({isDragging,isHovering})=>isDragging?config.CURSOR.GRABBING:isHovering?config.CURSOR.POINTER:config.CURSOR.GRAB,defaultProps=Object.assign({},StaticMap.defaultProps,MAPBOX_LIMITS,TransitionManager.defaultProps,{onViewStateChange:null,onViewportChange:null,onClick:null,onHover:null,onContextMenu:event=>event.preventDefault(),scrollZoom:!0,dragPan:!0,dragRotate:!0,doubleClickZoom:!0,touchAction:"none",clickRadius:0,getCursor:getDefaultCursor}),childContextTypes={viewport:PropTypes.instanceOf(WebMercatorViewport),isDragging:PropTypes.bool,eventManager:PropTypes.object};export default class InteractiveMap extends PureComponent{static supported(){return StaticMap.supported()}constructor(props){super(props),deprecateWarn(props),this.state={isDragging:!1,isHovering:!1},this._mapControls=props.mapControls||new MapControls,this._eventManager=new EventManager(null,{legacyBlockScroll:!1,touchAction:props.touchAction}),this._updateQueryParams(props.mapStyle),this.getMap=this.getMap.bind(this),this.queryRenderedFeatures=this.queryRenderedFeatures.bind(this),this._getFeatures=this._getFeatures.bind(this),this._updateQueryParams=this._updateQueryParams.bind(this),this._onInteractiveStateChange=this._onInteractiveStateChange.bind(this),this._getPos=this._getPos.bind(this),this._eventCanvasLoaded=this._eventCanvasLoaded.bind(this),this._staticMapLoaded=this._staticMapLoaded.bind(this)}getChildContext(){return{viewport:new WebMercatorViewport(this.props),isDragging:this.state.isDragging,eventManager:this._eventManager}}componentDidMount(){const eventManager=this._eventManager;eventManager.on({mousemove:this._onMouseMove.bind(this),click:this._onMouseClick.bind(this),contextmenu:this._onContextMenu.bind(this)}),this._mapControls.setOptions(Object.assign({},this.props,this.props.viewState,{onStateChange:this._onInteractiveStateChange,eventManager})),this._transitionManager=new TransitionManager(this.props)}componentWillUpdate(nextProps){this.props.mapStyle!==nextProps.mapStyle&&this._updateQueryParams(nextProps.mapStyle);const nextPropsWithViewState=Object.assign({},nextProps,nextProps.viewState);this._mapControls.setOptions(nextPropsWithViewState),this._transitionManager.processViewportChange(nextPropsWithViewState)}getMap(){return this._map?this._map.getMap():null}queryRenderedFeatures(geometry,options){return this._map.queryRenderedFeatures(geometry,options)}_getFeatures({pos,radius}){let features;if(radius){const size=radius,bbox=[[pos[0]-size,pos[1]+size],[pos[0]+size,pos[1]-size]];features=this._map.queryRenderedFeatures(bbox,this._queryParams)}else features=this._map.queryRenderedFeatures(pos,this._queryParams);return features}_updateQueryParams(mapStyle){const interactiveLayerIds=getInteractiveLayerIds(mapStyle);this._queryParams={layers:interactiveLayerIds}}_onInteractiveStateChange({isDragging=!1}){isDragging!==this.state.isDragging&&this.setState({isDragging})}_getPos(event){const _event$offsetCenter=event.offsetCenter,x=_event$offsetCenter.x,y=_event$offsetCenter.y;return[x,y]}_onMouseMove(event){if(!this.state.isDragging){const pos=this._getPos(event),features=this._getFeatures({pos,radius:this.props.clickRadius}),isHovering=features&&0<features.length;if(isHovering!==this.state.isHovering&&this.setState({isHovering}),this.props.onHover){const viewport=new WebMercatorViewport(this.props);event.lngLat=viewport.unproject(pos),event.features=features,this.props.onHover(event)}}}_onMouseClick(event){if(this.props.onClick){const pos=this._getPos(event),viewport=new WebMercatorViewport(this.props);event.lngLat=viewport.unproject(pos),event.features=this._getFeatures({pos,radius:this.props.clickRadius}),this.props.onClick(event)}}_onContextMenu(event){this.props.onContextMenu&&this.props.onContextMenu(event)}_eventCanvasLoaded(ref){this._eventManager.setElement(ref)}_staticMapLoaded(ref){this._map=ref}render(){const _this$props=this.props,width=_this$props.width,height=_this$props.height,getCursor=_this$props.getCursor,eventCanvasStyle={width,height,position:"relative",cursor:getCursor(this.state)};return createElement("div",{key:"map-controls",ref:this._eventCanvasLoaded,style:eventCanvasStyle},createElement(StaticMap,Object.assign({},this.props,this._transitionManager&&this._transitionManager.getViewportInTransition(),{ref:this._staticMapLoaded,children:this.props.children})))}}InteractiveMap.displayName="InteractiveMap",InteractiveMap.propTypes=propTypes,InteractiveMap.defaultProps=defaultProps,InteractiveMap.childContextTypes=childContextTypes;
//# sourceMappingURL=interactive-map.js.map