import{createElement}from"react";import PropTypes from"prop-types";import BaseControl from"./base-control";import MapState from"../utils/map-state";import TransitionManager from"../utils/transition-manager";import deprecateWarn from"../utils/deprecate-warn";const LINEAR_TRANSITION_PROPS=Object.assign({},TransitionManager.defaultProps,{transitionDuration:300}),propTypes=Object.assign({},BaseControl.propTypes,{className:PropTypes.string,onViewStateChange:PropTypes.func,onViewportChange:PropTypes.func,showCompass:PropTypes.bool,showZoom:PropTypes.bool}),defaultProps=Object.assign({},BaseControl.defaultProps,{className:"",onViewStateChange:()=>{},onViewportChange:()=>{},showCompass:!0,showZoom:!0});export default class NavigationControl extends BaseControl{constructor(props){super(props),deprecateWarn(props),this._updateViewport=this._updateViewport.bind(this),this._onZoomIn=this._onZoomIn.bind(this),this._onZoomOut=this._onZoomOut.bind(this),this._onResetNorth=this._onResetNorth.bind(this),this._renderCompass=this._renderCompass.bind(this),this._renderButton=this._renderButton.bind(this)}shouldComponentUpdate(nextProps,nextState,nextContext){return this.context.viewport.bearing!==nextContext.viewport.bearing}_updateViewport(opts){const viewport=this.context.viewport,mapState=new MapState(Object.assign({},viewport,opts)),viewState=Object.assign({},mapState.getViewportProps(),LINEAR_TRANSITION_PROPS);this.props.onViewStateChange({viewState});const onViewportChange=this.props.onChangeViewport||this.props.onViewportChange;onViewportChange(viewState)}_onZoomIn(){this._updateViewport({zoom:this.context.viewport.zoom+1})}_onZoomOut(){this._updateViewport({zoom:this.context.viewport.zoom-1})}_onResetNorth(){this._updateViewport({bearing:0,pitch:0})}_renderCompass(){const bearing=this.context.viewport.bearing;return createElement("span",{className:"mapboxgl-ctrl-compass-arrow",style:{transform:`rotate(${bearing}deg)`}})}_renderButton(type,label,callback,children){return createElement("button",{key:type,className:`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`,type:"button",title:label,onClick:callback,children})}render(){const _this$props=this.props,className=_this$props.className,showCompass=_this$props.showCompass,showZoom=_this$props.showZoom;return createElement("div",{className:`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`,ref:this._onContainerLoad},[showZoom&&this._renderButton("zoom-in","Zoom In",this._onZoomIn),showZoom&&this._renderButton("zoom-out","Zoom Out",this._onZoomOut),showCompass&&this._renderButton("compass","Reset North",this._onResetNorth,this._renderCompass())])}}NavigationControl.displayName="NavigationControl",NavigationControl.propTypes=propTypes,NavigationControl.defaultProps=defaultProps;
//# sourceMappingURL=navigation-control.js.map