{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","LinearInterpolator","MapState","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","DEFAULT_STATE","animation","propsInTransition","startProps","endProps","TransitionManager","constructor","props","state","_onTransitionFrame","bind","getViewportInTransition","processViewportChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","isTransitionInProgress","_isTransitionInProgress","_isTransitionEnabled","Object","assign","interruption","_triggerTransition","_endTransition","_isUpdateDueToCurrentTransition","interpolator","arePropsEqual","cancelAnimationFrame","initialProps","initializeProps","duration","easing","startTime","Date","now","start","end","requestAnimationFrame","_updateViewport","currentTime","shouldEnd","viewport","interpolateProps","mapState","getViewportProps","onViewportChange","onChangeViewport","onViewStateChange","viewState","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nconst DEFAULT_STATE = {\n  animation: null,\n  propsInTransition: null,\n  startProps: null,\n  endProps: null\n};\n\nexport default class TransitionManager {\n  constructor(props) {\n    this.props = props;\n    this.state = DEFAULT_STATE;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.state.propsInTransition;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    const isTransitionInProgress = this._isTransitionInProgress();\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps,\n        this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END ?\n        this.state.endProps : this.state.propsInTransition\n      );\n\n      if (isTransitionInProgress) {\n        currentProps.onTransitionInterrupt();\n      }\n      nextProps.onTransitionStart();\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else if (isTransitionInProgress) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this.state.propsInTransition);\n  }\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.state.animation);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n\n    this._onTransitionFrame();\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.state.animation = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    cancelAnimationFrame(this.state.animation);\n    this.state = DEFAULT_STATE;\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    // TODO(deprecate): remove this check when `onChangeViewport` gets deprecated\n    const onViewportChange = this.props.onViewportChange || this.props.onChangeViewport;\n    if (onViewportChange) {\n      onViewportChange(this.state.propsInTransition);\n    }\n\n    if (this.props.onViewStateChange) {\n      this.props.onViewStateChange({viewState: this.state.propsInTransition});\n    }\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}