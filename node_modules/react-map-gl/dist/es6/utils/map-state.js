function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i["return"]||_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}import WebMercatorViewport,{normalizeViewportProps}from"viewport-mercator-project";import assert from"./assert";export const MAPBOX_LIMITS={minZoom:0,maxZoom:20,minPitch:0,maxPitch:60};const DEFAULT_STATE={pitch:0,bearing:0,altitude:1.5};function clamp(value,min,max){return value<min?min:value>max?max:value}export default class MapState{constructor({width,height,latitude,longitude,zoom,bearing=DEFAULT_STATE.bearing,pitch=DEFAULT_STATE.pitch,altitude=DEFAULT_STATE.altitude,maxZoom=MAPBOX_LIMITS.maxZoom,minZoom=MAPBOX_LIMITS.minZoom,maxPitch=MAPBOX_LIMITS.maxPitch,minPitch=MAPBOX_LIMITS.minPitch,transitionDuration,transitionEasing,transitionInterpolator,transitionInterruption,startPanLngLat,startZoomLngLat,startBearing,startPitch,startZoom}={}){var _NumberisFinite=Number.isFinite;assert(_NumberisFinite(width),"`width` must be supplied"),assert(_NumberisFinite(height),"`height` must be supplied"),assert(_NumberisFinite(longitude),"`longitude` must be supplied"),assert(_NumberisFinite(latitude),"`latitude` must be supplied"),assert(_NumberisFinite(zoom),"`zoom` must be supplied"),this._viewportProps=this._applyConstraints({width,height,latitude,longitude,zoom,bearing,pitch,altitude,maxZoom,minZoom,maxPitch,minPitch,transitionDuration,transitionEasing,transitionInterpolator,transitionInterruption}),this._interactiveState={startPanLngLat,startZoomLngLat,startBearing,startPitch,startZoom}}getViewportProps(){return this._viewportProps}getInteractiveState(){return this._interactiveState}panStart({pos}){return this._getUpdatedMapState({startPanLngLat:this._unproject(pos)})}pan({pos,startPos}){const startPanLngLat=this._interactiveState.startPanLngLat||this._unproject(startPos);if(!startPanLngLat)return this;const _this$_calculateNewLn=this._calculateNewLngLat({startPanLngLat,pos}),_this$_calculateNewLn2=_slicedToArray(_this$_calculateNewLn,2),longitude=_this$_calculateNewLn2[0],latitude=_this$_calculateNewLn2[1];return this._getUpdatedMapState({longitude,latitude})}panEnd(){return this._getUpdatedMapState({startPanLngLat:null})}rotateStart({pos}){return this._getUpdatedMapState({startBearing:this._viewportProps.bearing,startPitch:this._viewportProps.pitch})}rotate({deltaScaleX=0,deltaScaleY=0}){var _NumberisFinite2=Number.isFinite;const _this$_interactiveSta=this._interactiveState,startBearing=_this$_interactiveSta.startBearing,startPitch=_this$_interactiveSta.startPitch;if(!_NumberisFinite2(startBearing)||!_NumberisFinite2(startPitch))return this;const _this$_calculateNewPi=this._calculateNewPitchAndBearing({deltaScaleX,deltaScaleY,startBearing,startPitch}),pitch=_this$_calculateNewPi.pitch,bearing=_this$_calculateNewPi.bearing;return this._getUpdatedMapState({bearing,pitch})}rotateEnd(){return this._getUpdatedMapState({startBearing:null,startPitch:null})}zoomStart({pos}){return this._getUpdatedMapState({startZoomLngLat:this._unproject(pos),startZoom:this._viewportProps.zoom})}zoom({pos,startPos,scale}){assert(0<scale,"`scale` must be a positive number");let _this$_interactiveSta2=this._interactiveState,startZoom=_this$_interactiveSta2.startZoom,startZoomLngLat=_this$_interactiveSta2.startZoomLngLat;Number.isFinite(startZoom)||(startZoom=this._viewportProps.zoom,startZoomLngLat=this._unproject(startPos)||this._unproject(pos)),assert(startZoomLngLat,"`startZoomLngLat` prop is required for zoom behavior to calculate where to position the map.");const zoom=this._calculateNewZoom({scale,startZoom}),zoomedViewport=new WebMercatorViewport(Object.assign({},this._viewportProps,{zoom})),_zoomedViewport$getLo=zoomedViewport.getLocationAtPoint({lngLat:startZoomLngLat,pos}),_zoomedViewport$getLo2=_slicedToArray(_zoomedViewport$getLo,2),longitude=_zoomedViewport$getLo2[0],latitude=_zoomedViewport$getLo2[1];return this._getUpdatedMapState({zoom,longitude,latitude})}zoomEnd(){return this._getUpdatedMapState({startZoomLngLat:null,startZoom:null})}_getUpdatedMapState(newProps){return new MapState(Object.assign({},this._viewportProps,this._interactiveState,newProps))}_applyConstraints(props){const maxZoom=props.maxZoom,minZoom=props.minZoom,zoom=props.zoom;props.zoom=clamp(zoom,minZoom,maxZoom);const maxPitch=props.maxPitch,minPitch=props.minPitch,pitch=props.pitch;return props.pitch=clamp(pitch,minPitch,maxPitch),Object.assign(props,normalizeViewportProps(props)),props}_unproject(pos){const viewport=new WebMercatorViewport(this._viewportProps);return pos&&viewport.unproject(pos)}_calculateNewLngLat({startPanLngLat,pos}){const viewport=new WebMercatorViewport(this._viewportProps);return viewport.getMapCenterByLngLatPosition({lngLat:startPanLngLat,pos})}_calculateNewZoom({scale,startZoom}){const _this$_viewportProps=this._viewportProps,maxZoom=_this$_viewportProps.maxZoom,minZoom=_this$_viewportProps.minZoom,zoom=startZoom+Math.log2(scale);return clamp(zoom,minZoom,maxZoom)}_calculateNewPitchAndBearing({deltaScaleX,deltaScaleY,startBearing,startPitch}){deltaScaleY=clamp(deltaScaleY,-1,1);const _this$_viewportProps2=this._viewportProps,minPitch=_this$_viewportProps2.minPitch,maxPitch=_this$_viewportProps2.maxPitch;let pitch=startPitch;return 0<deltaScaleY?pitch=startPitch+deltaScaleY*(maxPitch-startPitch):0>deltaScaleY&&(pitch=startPitch-deltaScaleY*(minPitch-startPitch)),{pitch,bearing:startBearing+180*deltaScaleX}}}
//# sourceMappingURL=map-state.js.map