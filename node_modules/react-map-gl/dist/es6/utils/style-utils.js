import isImmutableMap from"./is-immutable-map";import diffStyles from"./diff-styles";export function getInteractiveLayerIds(mapStyle){let interactiveLayerIds=null;return isImmutableMap(mapStyle)&&mapStyle.has("layers")?interactiveLayerIds=mapStyle.get("layers").filter(l=>l.get("interactive")).map(l=>l.get("id")).toJS():Array.isArray(mapStyle.layers)&&(interactiveLayerIds=mapStyle.layers.filter(l=>l.interactive).map(l=>l.id)),interactiveLayerIds}export function setDiffStyle(prevStyle,nextStyle,map){function styleKeysMap(style){return style.map(()=>!0).delete("layers").delete("sources").toJS()}const prevKeysMap=prevStyle&&styleKeysMap(prevStyle)||{},nextKeysMap=styleKeysMap(nextStyle);if(!prevStyle||function(){const prevKeysList=Object.keys(prevKeysMap),nextKeysList=Object.keys(nextKeysMap);return prevKeysList.length!==nextKeysList.length||!!nextKeysList.some(key=>prevStyle.get(key)!==nextStyle.get(key))}())return void map.setStyle(nextStyle.toJS());const _diffStyles=diffStyles(prevStyle,nextStyle),sourcesDiff=_diffStyles.sourcesDiff,layersDiff=_diffStyles.layersDiff;checkForEqualLayerSourceChanges(sourcesDiff.exit,nextStyle.get("layers")),applySourceLayerChanges(map,nextStyle,sourcesDiff,layersDiff)}function updateStyleSource(map,update){const newSource=update.source.toJS();if("geojson"===newSource.type){const oldSource=map.getSource(update.id);if("geojson"===oldSource.type){const oldOpts=oldSource.workerOptions,scale=oldOpts.geojsonVtOptions.extent/512;if((void 0===newSource.maxzoom||newSource.maxzoom===oldOpts.geojsonVtOptions.maxZoom)&&(void 0===newSource.buffer||newSource.buffer===oldOpts.geojsonVtOptions.buffer/scale)&&(void 0===newSource.tolerance||newSource.tolerance===oldOpts.geojsonVtOptions.tolerance/scale)&&(void 0===newSource.cluster||newSource.cluster===oldOpts.cluster)&&(void 0===newSource.clusterRadius||newSource.clusterRadius===oldOpts.superclusterOptions.radius/scale)&&(void 0===newSource.clusterMaxZoom||newSource.clusterMaxZoom===oldOpts.superclusterOptions.maxZoom))return void oldSource.setData(newSource.data)}}map.removeSource(update.id),map.addSource(update.id,newSource)}function applySourceLayerChanges(map,nextStyle,sourcesDiff,layersDiff){if(layersDiff.updates.some(node=>node.layer.get("ref")))return void map.setStyle(nextStyle.toJS());for(const enter of sourcesDiff.enter)map.addSource(enter.id,enter.source.toJS());for(const update of sourcesDiff.update)updateStyleSource(map,update);for(const exit of layersDiff.exiting)map.style.getLayer(exit.id)&&map.removeLayer(exit.id);for(const update of layersDiff.updates)update.enter||map.removeLayer(update.id),map.addLayer(update.layer.toJS(),update.before);for(const exit of sourcesDiff.exit)map.removeSource(exit.id)}function checkForEqualLayerSourceChanges(sourceExit,nextLayers){const sourceIds=sourceExit.map(s=>s.id),layersNotRemoved=nextLayers.filter(lyr=>sourceIds.includes(lyr.get("source")));if(layersNotRemoved.size)throw new Error(`You must remove any layers associated with sources you are removing: ${layersNotRemoved.map(l=>l.get("id")).toJS().join("")}`)}
//# sourceMappingURL=style-utils.js.map