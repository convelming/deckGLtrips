{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["WebMercatorViewport","normalizeViewportProps","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","clamp","value","min","max","MapState","constructor","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_interactiveState","getViewportProps","getInteractiveState","panStart","pos","_getUpdatedMapState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","Object","assign","getLocationAtPoint","lngLat","zoomEnd","newProps","props","viewport","unproject","getMapCenterByLngLatPosition","Math","log2"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\nfunction clamp(value, min, max) {\n  return value < min ? min : (value > max ? max : value);\n}\n\nexport default class MapState {\n\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(startZoomLngLat, '`startZoomLngLat` prop is required ' +\n      'for zoom behavior to calculate where to position the map.');\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(\n      Object.assign({}, this._viewportProps, {zoom})\n    );\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\n"],"file":"map-state.js"}