{"version":3,"sources":["../../../src/utils/style-utils.js"],"names":["isImmutableMap","diffStyles","getInteractiveLayerIds","mapStyle","interactiveLayerIds","has","get","filter","l","map","toJS","Array","isArray","layers","interactive","id","setDiffStyle","prevStyle","nextStyle","styleKeysMap","style","delete","prevKeysMap","nextKeysMap","prevKeysList","Object","keys","nextKeysList","length","some","key","setStyle","sourcesDiff","layersDiff","checkForEqualLayerSourceChanges","exit","applySourceLayerChanges","updateStyleSource","update","newSource","source","type","oldSource","getSource","oldOpts","workerOptions","scale","geojsonVtOptions","extent","maxzoom","maxZoom","buffer","tolerance","cluster","clusterRadius","superclusterOptions","radius","clusterMaxZoom","setData","data","removeSource","addSource","updates","node","layer","enter","exiting","getLayer","removeLayer","addLayer","before","sourceExit","nextLayers","sourceIds","s","layersNotRemoved","lyr","includes","size","Error","join"],"mappings":"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","sourcesContent":["import isImmutableMap from './is-immutable-map';\nimport diffStyles from './diff-styles';\n\n// TODO - remove in the next major release\n// Mapbox dropped the `interactive` property: https://github.com/mapbox/mapbox-gl-js/issues/1479\nexport function getInteractiveLayerIds(mapStyle) {\n  let interactiveLayerIds = null;\n\n  if (isImmutableMap(mapStyle) && mapStyle.has('layers')) {\n    interactiveLayerIds = mapStyle.get('layers')\n      .filter(l => l.get('interactive'))\n      .map(l => l.get('id'))\n      .toJS();\n  } else if (Array.isArray(mapStyle.layers)) {\n    interactiveLayerIds = mapStyle.layers.filter(l => l.interactive)\n      .map(l => l.id);\n  }\n\n  return interactiveLayerIds;\n}\n\n// Individually update the maps source and layers that have changed if all\n// other style props haven't changed. This prevents flicking of the map when\n// styles only change sources or layers.\n/* eslint-disable max-statements, complexity */\nexport function setDiffStyle(prevStyle, nextStyle, map) {\n  const prevKeysMap = prevStyle && styleKeysMap(prevStyle) || {};\n  const nextKeysMap = styleKeysMap(nextStyle);\n  function styleKeysMap(style) {\n    return style.map(() => true).delete('layers').delete('sources').toJS();\n  }\n  function propsOtherThanLayersOrSourcesDiffer() {\n    const prevKeysList = Object.keys(prevKeysMap);\n    const nextKeysList = Object.keys(nextKeysMap);\n    if (prevKeysList.length !== nextKeysList.length) {\n      return true;\n    }\n    // `nextStyle` and `prevStyle` should not have the same set of props.\n    if (nextKeysList.some(\n      key => prevStyle.get(key) !== nextStyle.get(key)\n      // But the value of one of those props is different.\n    )) {\n      return true;\n    }\n    return false;\n  }\n\n  if (!prevStyle || propsOtherThanLayersOrSourcesDiffer()) {\n    map.setStyle(nextStyle.toJS());\n    return;\n  }\n\n  const {sourcesDiff, layersDiff} = diffStyles(prevStyle, nextStyle);\n  checkForEqualLayerSourceChanges(sourcesDiff.exit, nextStyle.get('layers'));\n  applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff);\n}\n\n/* eslint-enable max-statements, complexity */\n\n// Update a source in the map style\nfunction updateStyleSource(map, update) {\n  const newSource = update.source.toJS();\n  if (newSource.type === 'geojson') {\n    const oldSource = map.getSource(update.id);\n    if (oldSource.type === 'geojson') {\n      // update data if no other GeoJSONSource options were changed\n      const oldOpts = oldSource.workerOptions;\n      // GeoJSONSource class scales user options before assigning to workerOptions\n      // https://github.com/mapbox/mapbox-gl-js/blob/master/src/source/geojson_source.js\n      const scale = oldOpts.geojsonVtOptions.extent / 512;\n\n      if (\n        (newSource.maxzoom === undefined ||\n          newSource.maxzoom === oldOpts.geojsonVtOptions.maxZoom) &&\n        (newSource.buffer === undefined ||\n          newSource.buffer === oldOpts.geojsonVtOptions.buffer / scale) &&\n        (newSource.tolerance === undefined ||\n          newSource.tolerance === oldOpts.geojsonVtOptions.tolerance / scale) &&\n        (newSource.cluster === undefined ||\n          newSource.cluster === oldOpts.cluster) &&\n        (newSource.clusterRadius === undefined ||\n          newSource.clusterRadius === oldOpts.superclusterOptions.radius / scale) &&\n        (newSource.clusterMaxZoom === undefined ||\n          newSource.clusterMaxZoom === oldOpts.superclusterOptions.maxZoom)\n      ) {\n        oldSource.setData(newSource.data);\n        return;\n      }\n    }\n  }\n\n  map.removeSource(update.id);\n  map.addSource(update.id, newSource);\n}\n\nfunction applySourceLayerChanges(map, nextStyle, sourcesDiff, layersDiff) {\n// TODO: It's rather difficult to determine style diffing in the presence\n  // of refs. For now, if any style update has a ref, fallback to no diffing.\n  // We can come back to this case if there's a solid usecase.\n  if (layersDiff.updates.some(node => node.layer.get('ref'))) {\n    map.setStyle(nextStyle.toJS());\n    return;\n  }\n\n  for (const enter of sourcesDiff.enter) {\n    map.addSource(enter.id, enter.source.toJS());\n  }\n  for (const update of sourcesDiff.update) {\n    updateStyleSource(map, update);\n  }\n\n  for (const exit of layersDiff.exiting) {\n    if (map.style.getLayer(exit.id)) {\n      map.removeLayer(exit.id);\n    }\n  }\n  for (const update of layersDiff.updates) {\n    if (!update.enter) {\n      // This is an old layer that needs to be updated. Remove the old layer\n      // with the same id and add it back again.\n      map.removeLayer(update.id);\n    }\n    map.addLayer(update.layer.toJS(), update.before);\n  }\n\n  for (const exit of sourcesDiff.exit) {\n    map.removeSource(exit.id);\n  }\n}\n\n/* eslint-disable max-len */\nfunction checkForEqualLayerSourceChanges(sourceExit, nextLayers) {\n  const sourceIds = sourceExit.map(s => s.id);\n  const layersNotRemoved = nextLayers.filter(lyr => sourceIds.includes(lyr.get('source')));\n  if (layersNotRemoved.size) {\n    // because of this, no source/layer changes will take effect if there is an error\n    throw new Error(`You must remove any layers associated with sources you are removing: ${layersNotRemoved.map(l => l.get('id')).toJS().join('')}`);\n  }\n}\n"],"file":"style-utils.js"}