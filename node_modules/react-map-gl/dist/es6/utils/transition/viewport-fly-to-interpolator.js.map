{"version":3,"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"names":["assert","TransitionInterpolator","flyToViewport","isValid","lerp","getEndValueByShortestPath","VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","ViewportFlyToInterpolator","constructor","propNames","initializeProps","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","interpolateProps","t","viewport"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAmB,WAAnB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,2BAAnC,CAEA,OAAQC,aAAR,KAA4B,2BAA5B,CACA,OAAQC,OAAR,CAAiBC,IAAjB,CAAuBC,yBAAvB,KAAuD,oBAAvD,C,KAEMC,CAAAA,yBAAyB,CAAG,CAAC,WAAD,CAAc,UAAd,CAA0B,MAA1B,CAAkC,SAAlC,CAA6C,OAA7C,C,CAC5BC,cAAc,CAAG,CAAC,UAAD,CAAa,WAAb,CAA0B,MAA1B,CAAkC,OAAlC,CAA2C,QAA3C,C,CACjBC,2BAA2B,CAAG,CAAC,SAAD,CAAY,OAAZ,C,CASpC,cAAe,MAAMC,CAAAA,yBAAN,QAAwCR,CAAAA,sBAAuB,CAE5ES,WAAW,EAAG,CACZ,OADY,CAEZ,KAAKC,SAAL,CAAiBL,yBAClB,CAEDM,eAAe,CAACC,UAAD,CAAaC,QAAb,CAAuB,MAC9BC,CAAAA,kBAAkB,CAAG,EADS,CAE9BC,gBAAgB,CAAG,EAFW,CAKpC,IAAK,KAAMC,CAAAA,GAAX,GAAkBV,CAAAA,cAAlB,CAAkC,MAC1BW,CAAAA,UAAU,CAAGL,UAAU,CAACI,GAAD,CADG,CAE1BE,QAAQ,CAAGL,QAAQ,CAACG,GAAD,CAFO,CAGhCjB,MAAM,CAACG,OAAO,CAACe,UAAD,CAAP,EAAuBf,OAAO,CAACgB,QAAD,CAA/B,CAA4C,GAAEF,GAAI,kCAAlD,CAH0B,CAIhCF,kBAAkB,CAACE,GAAD,CAAlB,CAA0BC,UAJM,CAKhCF,gBAAgB,CAACC,GAAD,CAAhB,CAAwBZ,yBAAyB,CAACY,GAAD,CAAMC,UAAN,CAAkBC,QAAlB,CAClD,CAED,IAAK,KAAMF,CAAAA,GAAX,GAAkBT,CAAAA,2BAAlB,CAA+C,MACvCU,CAAAA,UAAU,CAAGL,UAAU,CAACI,GAAD,CAAV,EAAmB,CADO,CAEvCE,QAAQ,CAAGL,QAAQ,CAACG,GAAD,CAAR,EAAiB,CAFW,CAG7CF,kBAAkB,CAACE,GAAD,CAAlB,CAA0BC,UAHmB,CAI7CF,gBAAgB,CAACC,GAAD,CAAhB,CAAwBZ,yBAAyB,CAACY,GAAD,CAAMC,UAAN,CAAkBC,QAAlB,CAClD,CAED,MAAO,CACLC,KAAK,CAAEL,kBADF,CAELM,GAAG,CAAEL,gBAFA,CAIR,CAEDM,gBAAgB,CAACT,UAAD,CAAaC,QAAb,CAAuBS,CAAvB,CAA0B,CACxC,KAAMC,CAAAA,QAAQ,CAAGtB,aAAa,CAACW,UAAD,CAAaC,QAAb,CAAuBS,CAAvB,CAA9B,CAGA,IAAK,KAAMN,CAAAA,GAAX,GAAkBT,CAAAA,2BAAlB,CACEgB,QAAQ,CAACP,GAAD,CAAR,CAAgBb,IAAI,CAACS,UAAU,CAACI,GAAD,CAAX,CAAkBH,QAAQ,CAACG,GAAD,CAA1B,CAAiCM,CAAjC,CAApB,CAGF,MAAOC,CAAAA,QACR,CA1C2E","sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport} from 'viewport-mercator-project';\nimport {isValid, lerp, getEndValueByShortestPath} from './transition-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n\n  constructor() {\n    super();\n    this.propNames = VIEWPORT_TRANSITION_PROPS;\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n}\n"],"file":"viewport-fly-to-interpolator.js"}