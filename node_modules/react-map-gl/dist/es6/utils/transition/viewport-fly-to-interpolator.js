import assert from"../assert";import TransitionInterpolator from"./transition-interpolator";import{flyToViewport}from"viewport-mercator-project";import{isValid,lerp,getEndValueByShortestPath}from"./transition-utils";const VIEWPORT_TRANSITION_PROPS=["longitude","latitude","zoom","bearing","pitch"],REQUIRED_PROPS=["latitude","longitude","zoom","width","height"],LINEARLY_INTERPOLATED_PROPS=["bearing","pitch"];export default class ViewportFlyToInterpolator extends TransitionInterpolator{constructor(){super(),this.propNames=VIEWPORT_TRANSITION_PROPS}initializeProps(startProps,endProps){const startViewportProps={},endViewportProps={};for(const key of REQUIRED_PROPS){const startValue=startProps[key],endValue=endProps[key];assert(isValid(startValue)&&isValid(endValue),`${key} must be supplied for transition`),startViewportProps[key]=startValue,endViewportProps[key]=getEndValueByShortestPath(key,startValue,endValue)}for(const key of LINEARLY_INTERPOLATED_PROPS){const startValue=startProps[key]||0,endValue=endProps[key]||0;startViewportProps[key]=startValue,endViewportProps[key]=getEndValueByShortestPath(key,startValue,endValue)}return{start:startViewportProps,end:endViewportProps}}interpolateProps(startProps,endProps,t){const viewport=flyToViewport(startProps,endProps,t);for(const key of LINEARLY_INTERPOLATED_PROPS)viewport[key]=lerp(startProps[key],endProps[key],t);return viewport}}
//# sourceMappingURL=viewport-fly-to-interpolator.js.map