{"version":3,"sources":["../../../../src/utils/transition/transition-utils.js"],"names":["WRAPPED_ANGULAR_PROPS","longitude","bearing","mod","value","divisor","modulus","lerp","start","end","step","Array","isArray","map","element","index","isValid","prop","Number","isFinite","isWrappedAngularProp","propName","getEndValueByShortestPath","startValue","endValue","Math","abs"],"mappings":"AACA,KAAMA,CAAAA,qBAAqB,CAAG,CAC5BC,SAAS,CAAE,CADiB,CAE5BC,OAAO,CAAE,CAFmB,CAA9B,CAKA,MAAO,SAASC,CAAAA,GAAT,CAAaC,KAAb,CAAoBC,OAApB,CAA6B,CAClC,KAAMC,CAAAA,OAAO,CAAGF,KAAK,CAAGC,OAAxB,CACA,MAAiB,EAAV,CAAAC,OAAO,CAAOD,OAAO,CAAGC,OAAjB,CAA2BA,OAC1C,CAED,MAAO,SAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqBC,GAArB,CAA0BC,IAA1B,CAAgC,OACjCC,CAAAA,KAAK,CAACC,OAAN,CAAcJ,KAAd,CADiC,CAE5BA,KAAK,CAACK,GAAN,CAAU,CAACC,OAAD,CAAUC,KAAV,GACRR,IAAI,CAACO,OAAD,CAAUL,GAAG,CAACM,KAAD,CAAb,CAAsBL,IAAtB,CADN,CAF4B,CAM9BA,IAAI,CAAGD,GAAP,CAAa,CAAC,EAAIC,IAAL,EAAaF,KAClC,CAED,MAAO,SAASQ,CAAAA,OAAT,CAAiBC,IAAjB,CAAuB,CAC5B,MAAOC,CAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAyBN,KAAK,CAACC,OAAN,CAAcK,IAAd,CACjC,CAED,QAASG,CAAAA,oBAAT,CAA8BC,QAA9B,CAAwC,CACtC,MAAOrB,CAAAA,qBAAqB,CAACqB,QAAD,CAC7B,CAED,MAAO,SAASC,CAAAA,yBAAT,CAAmCD,QAAnC,CAA6CE,UAA7C,CAAyDC,QAAzD,CAAmE,CAIxE,MAHIJ,CAAAA,oBAAoB,CAACC,QAAD,CAApB,EAAoE,GAAlC,CAAAI,IAAI,CAACC,GAAL,CAASF,QAAQ,CAAGD,UAApB,CAGtC,GAFEC,QAAQ,CAAe,CAAX,CAAAA,QAAD,CAAiBA,QAAQ,CAAG,GAA5B,CAAkCA,QAAQ,CAAG,GAE1D,EAAOA,QACR","sourcesContent":["\nconst WRAPPED_ANGULAR_PROPS = {\n  longitude: 1,\n  bearing: 1\n};\n\nexport function mod(value, divisor) {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nexport function lerp(start, end, step) {\n  if (Array.isArray(start)) {\n    return start.map((element, index) => {\n      return lerp(element, end[index], step);\n    });\n  }\n  return step * end + (1 - step) * start;\n}\n\nexport function isValid(prop) {\n  return Number.isFinite(prop) || Array.isArray(prop);\n}\n\nfunction isWrappedAngularProp(propName) {\n  return WRAPPED_ANGULAR_PROPS[propName];\n}\n\nexport function getEndValueByShortestPath(propName, startValue, endValue) {\n  if (isWrappedAngularProp(propName) && Math.abs(endValue - startValue) > 180) {\n    endValue = (endValue < 0) ? endValue + 360 : endValue - 360;\n  }\n  return endValue;\n}\n"],"file":"transition-utils.js"}