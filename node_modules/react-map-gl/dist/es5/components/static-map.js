"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styleUtils = require("../utils/style-utils");

var _isImmutableMap = _interopRequireDefault(require("../utils/is-immutable-map"));

var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));

var _mapbox = _interopRequireDefault(require("../mapbox/mapbox"));

var _isBrowser = _interopRequireDefault(require("../utils/is-browser"));

var _mapConstraints = require("../utils/map-constraints");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var mapboxgl = _isBrowser.default ? require('mapbox-gl') : null;
/* eslint-disable max-len */

var TOKEN_DOC_URL = 'https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens';
var NO_TOKEN_WARNING = 'A valid API access token is required to use Mapbox data';
/* eslint-disable max-len */

function noop() {}

var UNAUTHORIZED_ERROR_CODE = 401;
var propTypes = Object.assign({}, _mapbox.default.propTypes, {
  /** The Mapbox style. A string url or a MapboxGL style Immutable.Map object. */
  mapStyle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /** There are known issues with style diffing. As stopgap, add option to prevent style diffing. */
  preventStyleDiffing: _propTypes.default.bool,

  /** Hide invalid token warning even if request fails */
  disableTokenWarning: _propTypes.default.bool,

  /** Whether the map is visible */
  visible: _propTypes.default.bool,

  /** Advanced features */
  // Contraints for displaying the map. If not met, then the map is hidden.
  // Experimental! May be changed in minor version updates.
  visibilityConstraints: _propTypes.default.object
});
var defaultProps = Object.assign({}, _mapbox.default.defaultProps, {
  mapStyle: 'mapbox://styles/mapbox/light-v8',
  preventStyleDiffing: false,
  visible: true
});
var childContextTypes = {
  viewport: _propTypes.default.instanceOf(_viewportMercatorProject.default)
};

var StaticMap =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(StaticMap, _PureComponent);

  _createClass(StaticMap, null, [{
    key: "supported",
    value: function supported() {
      return mapboxgl && mapboxgl.supported();
    }
  }]);

  function StaticMap(props) {
    var _this;

    _classCallCheck(this, StaticMap);

    _this = _possibleConstructorReturn(this, (StaticMap.__proto__ || Object.getPrototypeOf(StaticMap)).call(this, props));
    _this._queryParams = {};

    if (!StaticMap.supported()) {
      _this.componentDidMount = noop;
      _this.componentWillReceiveProps = noop;
      _this.componentDidUpdate = noop;
      _this.componentWillUnmount = noop;
    }

    _this.state = {
      accessTokenInvalid: false
    };
    _this.getMap = _this.getMap.bind(_assertThisInitialized(_this));
    _this.queryRenderedFeatures = _this.queryRenderedFeatures.bind(_assertThisInitialized(_this));
    _this._updateMapSize = _this._updateMapSize.bind(_assertThisInitialized(_this));
    _this._updateMapStyle = _this._updateMapStyle.bind(_assertThisInitialized(_this));
    _this._mapboxMapLoaded = _this._mapboxMapLoaded.bind(_assertThisInitialized(_this));
    _this._mapboxMapError = _this._mapboxMapError.bind(_assertThisInitialized(_this));
    _this._renderNoTokenWarning = _this._renderNoTokenWarning.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(StaticMap, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        viewport: new _viewportMercatorProject.default(this.props)
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var mapStyle = this.props.mapStyle;
      this._mapbox = new _mapbox.default(Object.assign({}, this.props, {
        mapboxgl: mapboxgl,
        // Handle to mapbox-gl library
        container: this._mapboxMap,
        onError: this._mapboxMapError,
        mapStyle: (0, _isImmutableMap.default)(mapStyle) ? mapStyle.toJS() : mapStyle
      }));
      this._map = this._mapbox.getMap();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      this._mapbox.setProps(newProps);

      this._updateMapStyle(this.props, newProps); // this._updateMapViewport(this.props, newProps);
      // Save width/height so that we can check them in componentDidUpdate


      this.setState({
        width: this.props.width,
        height: this.props.height
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      // Since Mapbox's map.resize() reads size from DOM
      // we must wait to read size until after render (i.e. here in "didUpdate")
      this._updateMapSize(this.state, this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._mapbox.finalize();

      this._mapbox = null;
      this._map = null;
    } // External apps can access map this way

  }, {
    key: "getMap",
    value: function getMap() {
      return this._map;
    }
    /** Uses Mapbox's
      * queryRenderedFeatures API to find features at point or in a bounding box.
      * https://www.mapbox.com/mapbox-gl-js/api/#Map#queryRenderedFeatures
      * To query only some of the layers, set the `interactive` property in the
      * layer style to `true`.
      * @param {[Number, Number]|[[Number, Number], [Number, Number]]} geometry -
      *   Point or an array of two points defining the bounding box
      * @param {Object} options - query options
      */

  }, {
    key: "queryRenderedFeatures",
    value: function queryRenderedFeatures(geometry) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this._map.queryRenderedFeatures(geometry, options);
    } // Note: needs to be called after render (e.g. in componentDidUpdate)

  }, {
    key: "_updateMapSize",
    value: function _updateMapSize(oldProps, newProps) {
      var sizeChanged = oldProps.width !== newProps.width || oldProps.height !== newProps.height;

      if (sizeChanged) {
        this._map.resize(); // this._callOnChangeViewport(this._map.transform);

      }
    }
  }, {
    key: "_updateMapStyle",
    value: function _updateMapStyle(oldProps, newProps) {
      var mapStyle = newProps.mapStyle;
      var oldMapStyle = oldProps.mapStyle;

      if (mapStyle !== oldMapStyle) {
        if ((0, _isImmutableMap.default)(mapStyle)) {
          if (this.props.preventStyleDiffing) {
            this._map.setStyle(mapStyle.toJS());
          } else {
            (0, _styleUtils.setDiffStyle)(oldMapStyle, mapStyle, this._map);
          }
        } else {
          this._map.setStyle(mapStyle);
        }
      }
    }
  }, {
    key: "_mapboxMapLoaded",
    value: function _mapboxMapLoaded(ref) {
      this._mapboxMap = ref;
    } // Handle map error

  }, {
    key: "_mapboxMapError",
    value: function _mapboxMapError(evt) {
      var statusCode = evt.error && evt.error.status || evt.status;

      if (statusCode === UNAUTHORIZED_ERROR_CODE && !this.state.accessTokenInvalid) {
        // Mapbox throws unauthorized error - invalid token
        console.error(NO_TOKEN_WARNING); // eslint-disable-line

        this.setState({
          accessTokenInvalid: true
        });
      }
    }
  }, {
    key: "_renderNoTokenWarning",
    value: function _renderNoTokenWarning() {
      if (this.state.accessTokenInvalid && !this.props.disableTokenWarning) {
        var style = {
          position: 'absolute',
          left: 0,
          top: 0
        };
        return (0, _react.createElement)('div', {
          key: 'warning',
          id: 'no-token-warning',
          style: style
        }, [(0, _react.createElement)('h3', {
          key: 'header'
        }, NO_TOKEN_WARNING), (0, _react.createElement)('div', {
          key: 'text'
        }, 'For information on setting up your basemap, read'), (0, _react.createElement)('a', {
          key: 'link',
          href: TOKEN_DOC_URL
        }, 'Note on Map Tokens')]);
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          width = _this$props.width,
          height = _this$props.height,
          style = _this$props.style,
          visibilityConstraints = _this$props.visibilityConstraints;
      var mapContainerStyle = Object.assign({}, style, {
        width: width,
        height: height,
        position: 'relative'
      });
      var visible = this.props.visible && (0, _mapConstraints.checkVisibilityConstraints)(this.props.viewState || this.props, visibilityConstraints);
      var mapStyle = Object.assign({}, style, {
        width: width,
        height: height,
        visibility: visible ? 'visible' : 'hidden'
      });
      var overlayContainerStyle = {
        position: 'absolute',
        left: 0,
        top: 0,
        width: width,
        height: height,
        overflow: 'hidden'
      }; // Note: a static map still handles clicks and hover events

      return (0, _react.createElement)('div', {
        key: 'map-container',
        style: mapContainerStyle,
        children: [(0, _react.createElement)('div', {
          key: 'map-mapbox',
          ref: this._mapboxMapLoaded,
          style: mapStyle,
          className: className
        }), (0, _react.createElement)('div', {
          key: 'map-overlays',
          // Same as interactive map's overlay container
          className: 'overlays',
          style: overlayContainerStyle,
          children: this.props.children
        }), this._renderNoTokenWarning()]
      });
    }
  }]);

  return StaticMap;
}(_react.PureComponent);

exports.default = StaticMap;
StaticMap.displayName = 'StaticMap';
StaticMap.propTypes = propTypes;
StaticMap.defaultProps = defaultProps;
StaticMap.childContextTypes = childContextTypes;
//# sourceMappingURL=static-map.js.map