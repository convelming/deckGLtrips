"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var propTypes = {
  /** Event handling */
  captureScroll: _propTypes.default.bool,
  // Stop map pan & rotate
  captureDrag: _propTypes.default.bool,
  // Stop map click
  captureClick: _propTypes.default.bool,
  // Stop map double click
  captureDoubleClick: _propTypes.default.bool
};
var defaultProps = {
  captureScroll: false,
  captureDrag: true,
  captureClick: true,
  captureDoubleClick: true
};
var contextTypes = {
  viewport: _propTypes.default.instanceOf(_viewportMercatorProject.default),
  isDragging: _propTypes.default.bool,
  eventManager: _propTypes.default.object
};
/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the marker's position when the parent re-renders.
 */

var BaseControl =
/*#__PURE__*/
function (_Component) {
  _inherits(BaseControl, _Component);

  function BaseControl(props) {
    var _this;

    _classCallCheck(this, BaseControl);

    _this = _possibleConstructorReturn(this, (BaseControl.__proto__ || Object.getPrototypeOf(BaseControl)).call(this, props));
    _this._events = null;
    _this._onContainerLoad = _this._onContainerLoad.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(BaseControl, [{
    key: "_onContainerLoad",
    value: function _onContainerLoad(ref) {
      var eventManager = this.context.eventManager; // Return early if no eventManager is found

      if (!eventManager) {
        return;
      }

      var events = this._events; // Remove all previously registered events

      if (events) {
        eventManager.off(events);
        events = null;
      }

      if (ref) {
        // container is mounted: register events for this element
        events = {
          wheel: this._onScroll.bind(this),
          panstart: this._onDrag.bind(this),
          click: this._onClick.bind(this),
          dblclick: this._onDoubleClick.bind(this)
        };
        eventManager.on(events, ref);
      }

      this._events = events;
    }
  }, {
    key: "_onScroll",
    value: function _onScroll(evt) {
      if (this.props.captureScroll) {
        evt.stopPropagation();
      }
    }
  }, {
    key: "_onDrag",
    value: function _onDrag(evt) {
      if (this.props.captureDrag) {
        evt.stopPropagation();
      }
    }
  }, {
    key: "_onClick",
    value: function _onClick(evt) {
      if (this.props.captureClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: "_onDoubleClick",
    value: function _onDoubleClick(evt) {
      if (this.props.captureDoubleClick) {
        evt.stopPropagation();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return BaseControl;
}(_react.Component);

exports.default = BaseControl;
BaseControl.propTypes = propTypes;
BaseControl.defaultProps = defaultProps;
BaseControl.contextTypes = contextTypes;
//# sourceMappingURL=base-control.js.map