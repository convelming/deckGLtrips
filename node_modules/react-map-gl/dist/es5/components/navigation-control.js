"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _baseControl = _interopRequireDefault(require("./base-control"));

var _mapState = _interopRequireDefault(require("../utils/map-state"));

var _transitionManager = _interopRequireDefault(require("../utils/transition-manager"));

var _deprecateWarn = _interopRequireDefault(require("../utils/deprecate-warn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var LINEAR_TRANSITION_PROPS = Object.assign({}, _transitionManager.default.defaultProps, {
  transitionDuration: 300
});
var propTypes = Object.assign({}, _baseControl.default.propTypes, {
  // Custom className
  className: _propTypes.default.string,
  // Callbacks fired when the user interacted with the map. The object passed to the callbacks
  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.
  onViewStateChange: _propTypes.default.func,
  onViewportChange: _propTypes.default.func,
  // Show/hide compass button
  showCompass: _propTypes.default.bool,
  // Show/hide zoom buttons
  showZoom: _propTypes.default.bool
});
var defaultProps = Object.assign({}, _baseControl.default.defaultProps, {
  className: '',
  onViewStateChange: function onViewStateChange() {},
  onViewportChange: function onViewportChange() {},
  showCompass: true,
  showZoom: true
});
/*
 * PureComponent doesn't update when context changes, so
 * implementing our own shouldComponentUpdate here.
 */

var NavigationControl =
/*#__PURE__*/
function (_BaseControl) {
  _inherits(NavigationControl, _BaseControl);

  function NavigationControl(props) {
    var _this;

    _classCallCheck(this, NavigationControl);

    _this = _possibleConstructorReturn(this, (NavigationControl.__proto__ || Object.getPrototypeOf(NavigationControl)).call(this, props)); // Check for deprecated props

    (0, _deprecateWarn.default)(props);
    _this._updateViewport = _this._updateViewport.bind(_assertThisInitialized(_this));
    _this._onZoomIn = _this._onZoomIn.bind(_assertThisInitialized(_this));
    _this._onZoomOut = _this._onZoomOut.bind(_assertThisInitialized(_this));
    _this._onResetNorth = _this._onResetNorth.bind(_assertThisInitialized(_this));
    _this._renderCompass = _this._renderCompass.bind(_assertThisInitialized(_this));
    _this._renderButton = _this._renderButton.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NavigationControl, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      return this.context.viewport.bearing !== nextContext.viewport.bearing;
    }
  }, {
    key: "_updateViewport",
    value: function _updateViewport(opts) {
      var viewport = this.context.viewport;
      var mapState = new _mapState.default(Object.assign({}, viewport, opts));
      var viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS); // Call new style callback

      this.props.onViewStateChange({
        viewState: viewState
      }); // Call old style callback
      // TODO(deprecate): remove this check when `onChangeViewport` gets deprecated

      var onViewportChange = this.props.onChangeViewport || this.props.onViewportChange;
      onViewportChange(viewState);
    }
  }, {
    key: "_onZoomIn",
    value: function _onZoomIn() {
      this._updateViewport({
        zoom: this.context.viewport.zoom + 1
      });
    }
  }, {
    key: "_onZoomOut",
    value: function _onZoomOut() {
      this._updateViewport({
        zoom: this.context.viewport.zoom - 1
      });
    }
  }, {
    key: "_onResetNorth",
    value: function _onResetNorth() {
      this._updateViewport({
        bearing: 0,
        pitch: 0
      });
    }
  }, {
    key: "_renderCompass",
    value: function _renderCompass() {
      var bearing = this.context.viewport.bearing;
      return (0, _react.createElement)('span', {
        className: 'mapboxgl-ctrl-compass-arrow',
        style: {
          transform: "rotate(".concat(bearing, "deg)")
        }
      });
    }
  }, {
    key: "_renderButton",
    value: function _renderButton(type, label, callback, children) {
      return (0, _react.createElement)('button', {
        key: type,
        className: "mapboxgl-ctrl-icon mapboxgl-ctrl-".concat(type),
        type: 'button',
        title: label,
        onClick: callback,
        children: children
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          showCompass = _this$props.showCompass,
          showZoom = _this$props.showZoom;
      return (0, _react.createElement)('div', {
        className: "mapboxgl-ctrl mapboxgl-ctrl-group ".concat(className),
        ref: this._onContainerLoad
      }, [showZoom && this._renderButton('zoom-in', 'Zoom In', this._onZoomIn), showZoom && this._renderButton('zoom-out', 'Zoom Out', this._onZoomOut), showCompass && this._renderButton('compass', 'Reset North', this._onResetNorth, this._renderCompass())]);
    }
  }]);

  return NavigationControl;
}(_baseControl.default);

exports.default = NavigationControl;
NavigationControl.displayName = 'NavigationControl';
NavigationControl.propTypes = propTypes;
NavigationControl.defaultProps = defaultProps;
//# sourceMappingURL=navigation-control.js.map