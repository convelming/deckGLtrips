{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","clamp","value","min","max","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_interactiveState","pos","_getUpdatedMapState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","WebMercatorViewport","Object","assign","getLocationAtPoint","lngLat","newProps","props","viewport","unproject","getMapCenterByLngLatPosition","Math","log2"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\nfunction clamp(value, min, max) {\n  return value < min ? min : (value > max ? max : value);\n}\n\nexport default class MapState {\n\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(startZoomLngLat, '`startZoomLngLat` prop is required ' +\n      'for zoom behavior to calculate where to position the map.');\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(\n      Object.assign({}, this._viewportProps, {zoom})\n    );\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\n"],"file":"map-state.js"}