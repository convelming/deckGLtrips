{"version":3,"sources":["../../../../src/utils/transition/transition-utils.js"],"names":["WRAPPED_ANGULAR_PROPS","longitude","bearing","mod","value","divisor","modulus","lerp","start","end","step","Array","isArray","map","element","index","isValid","prop","Number","isFinite","isWrappedAngularProp","propName","getEndValueByShortestPath","startValue","endValue","Math","abs"],"mappings":";;;;;;;;;AACA,IAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,SAAS,EAAE,CADiB;AAE5BC,EAAAA,OAAO,EAAE;AAFmB,CAA9B;;AAKO,SAASC,GAAT,CAAaC,KAAb,EAAoBC,OAApB,EAA6B;AAClC,MAAMC,OAAO,GAAGF,KAAK,GAAGC,OAAxB;AACA,SAAOC,OAAO,GAAG,CAAV,GAAcD,OAAO,GAAGC,OAAxB,GAAkCA,OAAzC;AACD;;AAEM,SAASC,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,MAAIC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,WAAOA,KAAK,CAACK,GAAN,CAAU,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACnC,aAAOR,IAAI,CAACO,OAAD,EAAUL,GAAG,CAACM,KAAD,CAAb,EAAsBL,IAAtB,CAAX;AACD,KAFM,CAAP;AAGD;;AACD,SAAOA,IAAI,GAAGD,GAAP,GAAa,CAAC,IAAIC,IAAL,IAAaF,KAAjC;AACD;;AAEM,SAASQ,OAAT,CAAiBC,IAAjB,EAAuB;AAC5B,SAAOC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,KAAyBN,KAAK,CAACC,OAAN,CAAcK,IAAd,CAAhC;AACD;;AAED,SAASG,oBAAT,CAA8BC,QAA9B,EAAwC;AACtC,SAAOrB,qBAAqB,CAACqB,QAAD,CAA5B;AACD;;AAEM,SAASC,yBAAT,CAAmCD,QAAnC,EAA6CE,UAA7C,EAAyDC,QAAzD,EAAmE;AACxE,MAAIJ,oBAAoB,CAACC,QAAD,CAApB,IAAkCI,IAAI,CAACC,GAAL,CAASF,QAAQ,GAAGD,UAApB,IAAkC,GAAxE,EAA6E;AAC3EC,IAAAA,QAAQ,GAAIA,QAAQ,GAAG,CAAZ,GAAiBA,QAAQ,GAAG,GAA5B,GAAkCA,QAAQ,GAAG,GAAxD;AACD;;AACD,SAAOA,QAAP;AACD","sourcesContent":["\nconst WRAPPED_ANGULAR_PROPS = {\n  longitude: 1,\n  bearing: 1\n};\n\nexport function mod(value, divisor) {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nexport function lerp(start, end, step) {\n  if (Array.isArray(start)) {\n    return start.map((element, index) => {\n      return lerp(element, end[index], step);\n    });\n  }\n  return step * end + (1 - step) * start;\n}\n\nexport function isValid(prop) {\n  return Number.isFinite(prop) || Array.isArray(prop);\n}\n\nfunction isWrappedAngularProp(propName) {\n  return WRAPPED_ANGULAR_PROPS[propName];\n}\n\nexport function getEndValueByShortestPath(propName, startValue, endValue) {\n  if (isWrappedAngularProp(propName) && Math.abs(endValue - startValue) > 180) {\n    endValue = (endValue < 0) ? endValue + 360 : endValue - 360;\n  }\n  return endValue;\n}\n"],"file":"transition-utils.js"}